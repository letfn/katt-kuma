---
# Source: crds/circuit-breaker.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: circuitbreakers.kuma.io
spec:
  group: kuma.io
  names:
    kind: CircuitBreaker
    plural: circuitbreakers
  scope: Cluster
  versions:
    - name: v1alpha1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          description: CircuitBreaker is the Schema for the circuitbreaker API
          properties:
            mesh:
              type: string
            spec:
              x-kubernetes-preserve-unknown-fields: true
              type: object
          type: object

---
# Source: crds/data-planes.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: dataplanes.kuma.io
spec:
  group: kuma.io
  names:
    kind: Dataplane
    plural: dataplanes
  scope: Namespaced
  versions:
    - name: v1alpha1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          description: Dataplane is the Schema for the dataplanes API
          properties:
            mesh:
              type: string
            spec:
              x-kubernetes-preserve-unknown-fields: true
              type: object
          type: object

---
# Source: crds/dataplane-insight.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: dataplaneinsights.kuma.io
spec:
  group: kuma.io
  names:
    kind: DataplaneInsight
    plural: dataplaneinsights
  scope: Namespaced
  versions:
    - name: v1alpha1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          description: DataplaneInsight is the Schema for the dataplane insights API
          properties:
            mesh:
              type: string
            status:
              x-kubernetes-preserve-unknown-fields: true
              type: object
          type: object

---
# Source: crds/external-services.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: externalservices.kuma.io
spec:
  group: kuma.io
  names:
    kind: ExternalService
    plural: externalservices
  scope: Cluster
  versions:
    - name: v1alpha1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          properties:
            mesh:
              type: string
            spec:
              x-kubernetes-preserve-unknown-fields: true
              type: object
          type: object

---
# Source: crds/fault-injections.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: faultinjections.kuma.io
spec:
  group: kuma.io
  names:
    kind: FaultInjection
    plural: faultinjections
  scope: Cluster
  versions:
    - name: v1alpha1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          description: FaultInjection is the Schema for the faultinjections API
          properties:
            mesh:
              type: string
            spec:
              x-kubernetes-preserve-unknown-fields: true
              type: object
          type: object

---
# Source: crds/healthchecks.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: healthchecks.kuma.io
spec:
  group: kuma.io
  names:
    kind: HealthCheck
    plural: healthchecks
  scope: Cluster
  versions:
    - name: v1alpha1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          description: HealthCheck is the Schema for the healthchecks API
          properties:
            mesh:
              type: string
            spec:
              x-kubernetes-preserve-unknown-fields: true
              type: object
          type: object

---
# Source: crds/mesh-insight.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: meshinsights.kuma.io
spec:
  group: kuma.io
  names:
    kind: MeshInsight
    plural: meshinsights
  scope: Cluster
  versions:
    - name: v1alpha1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          description: MeshInsight is the Schema for the meshes insights API
          properties:
            mesh:
              type: string
            spec:
              x-kubernetes-preserve-unknown-fields: true
              type: object
          type: object

---
# Source: crds/meshes.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: meshes.kuma.io
spec:
  group: kuma.io
  names:
    kind: Mesh
    plural: meshes
  scope: Cluster
  versions:
    - name: v1alpha1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          description: Mesh is the Schema for the meshes API
          properties:
            spec:
              x-kubernetes-preserve-unknown-fields: true
              type: object
          type: object

---
# Source: crds/proxy-templates.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: proxytemplates.kuma.io
spec:
  group: kuma.io
  names:
    kind: ProxyTemplate
    plural: proxytemplates
  scope: Cluster
  versions:
    - name: v1alpha1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          description: ProxyTemplate is the Schema for the proxytemplates API
          properties:
            mesh:
              type: string
            spec:
              x-kubernetes-preserve-unknown-fields: true
              type: object
          type: object

---
# Source: crds/rate-limits.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: ratelimits.kuma.io
spec:
  group: kuma.io
  names:
    kind: RateLimit
    plural: ratelimits
  scope: Cluster
  versions:
    - name: v1alpha1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          description: RateLimit is the Schema for the ratelimits API
          properties:
            mesh:
              type: string
            spec:
              x-kubernetes-preserve-unknown-fields: true
              type: object
          type: object

---
# Source: crds/retries.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: retries.kuma.io
spec:
  group: kuma.io
  names:
    kind: Retry
    plural: retries
  scope: Cluster
  versions:
    - name: v1alpha1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          description: Retry is the Schema for the retries API
          properties:
            mesh:
              type: string
            spec:
              x-kubernetes-preserve-unknown-fields: true
              type: object
          type: object

---
# Source: crds/service-insights.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: serviceinsights.kuma.io
spec:
  group: kuma.io
  names:
    kind: ServiceInsight
    plural: serviceinsights
  scope: Cluster
  versions:
    - name: v1alpha1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          description: ServiceInsight is the Schema for the services insights API
          properties:
            mesh:
              type: string
            spec:
              x-kubernetes-preserve-unknown-fields: true
              type: object
          type: object

---
# Source: crds/timeouts.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: timeouts.kuma.io
spec:
  group: kuma.io
  names:
    kind: Timeout
    plural: timeouts
  scope: Cluster
  versions:
    - name: v1alpha1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          description: Timeout is the Schema for the timeout API
          properties:
            mesh:
              type: string
            spec:
              x-kubernetes-preserve-unknown-fields: true
              type: object
          type: object

---
# Source: crds/traffic-logs.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: trafficlogs.kuma.io
spec:
  group: kuma.io
  names:
    kind: TrafficLog
    plural: trafficlogs
  scope: Cluster
  versions:
    - name: v1alpha1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          description: TrafficLog is the Schema for the trafficlogs API
          properties:
            mesh:
              type: string
            spec:
              x-kubernetes-preserve-unknown-fields: true
              type: object
          type: object

---
# Source: crds/traffic-permissions.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: trafficpermissions.kuma.io
spec:
  group: kuma.io
  names:
    kind: TrafficPermission
    plural: trafficpermissions
  scope: Cluster
  versions:
    - name: v1alpha1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          description: TrafficPermission is the Schema for the trafficpermissions API
          properties:
            mesh:
              type: string
            spec:
              x-kubernetes-preserve-unknown-fields: true
              type: object
          type: object

---
# Source: crds/traffic-routes.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: trafficroutes.kuma.io
spec:
  group: kuma.io
  names:
    kind: TrafficRoute
    plural: trafficroutes
  scope: Cluster
  versions:
    - name: v1alpha1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          description: TrafficRoute is the Schema for the trafficroutes API
          properties:
            mesh:
              type: string
            spec:
              x-kubernetes-preserve-unknown-fields: true
              type: object
          type: object

---
# Source: crds/traffic-traces.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: traffictraces.kuma.io
spec:
  group: kuma.io
  names:
    kind: TrafficTrace
    plural: traffictraces
  scope: Cluster
  versions:
    - name: v1alpha1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          description: TrafficTrace is the Schema for the traffictraces API
          properties:
            mesh:
              type: string
            spec:
              x-kubernetes-preserve-unknown-fields: true
              type: object
          type: object

---
# Source: crds/virtual-outbounds.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: virtualoutbounds.kuma.io
spec:
  group: kuma.io
  names:
    kind: VirtualOutbound
    plural: virtualoutbounds
  scope: Cluster
  versions:
    - name: v1alpha1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          description: VirtualOutbound is the Schema for the virtualoutbounds API
          properties:
            mesh:
              type: string
            spec:
              x-kubernetes-preserve-unknown-fields: true
              type: object
          type: object

---
# Source: crds/zone-ingress-insight.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: zoneingressinsights.kuma.io
spec:
  group: kuma.io
  names:
    kind: ZoneIngressInsight
    plural: zoneingressinsights
  scope: Namespaced
  versions:
    - name: v1alpha1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          description: ZoneIngressInsight is the Schema for the zone ingress insight API
          properties:
            mesh:
              type: string
            spec:
              x-kubernetes-preserve-unknown-fields: true
              type: object
          type: object

---
# Source: crds/zone-insight.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: zoneinsights.kuma.io
spec:
  group: kuma.io
  names:
    kind: ZoneInsight
    plural: zoneinsights
  scope: Cluster
  versions:
    - name: v1alpha1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          description: ZoneInsight is the Schema for the zone insight API
          properties:
            mesh:
              type: string
            spec:
              x-kubernetes-preserve-unknown-fields: true
              type: object
          type: object

---
# Source: crds/zone.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: zones.kuma.io
spec:
  group: kuma.io
  names:
    kind: Zone
    plural: zones
  scope: Cluster
  versions:
    - name: v1alpha1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          description: Zone is the Schema for the zone API
          properties:
            mesh:
              type: string
            spec:
              x-kubernetes-preserve-unknown-fields: true
              type: object
          type: object

---
# Source: crds/zoneingresses.yaml

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: zoneingresses.kuma.io
spec:
  group: kuma.io
  names:
    kind: ZoneIngress
    plural: zoneingresses
  scope: Namespaced
  versions:
    - name: v1alpha1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          description: ZoneIngress is the Schema for the zone ingress API
          properties:
            mesh:
              type: string
            spec:
              x-kubernetes-preserve-unknown-fields: true
              type: object
          type: object

---
# Source: kuma/templates/cp-rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kuma-control-plane
  namespace: kuma-system
  labels:
    helm.sh/chart: kuma-0.7.1
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: kuma
    app.kubernetes.io/version: "1.3.1"
    app.kubernetes.io/managed-by: Helm
---
# Source: kuma/templates/cp-webhooks-and-secrets.yaml
apiVersion: v1
kind: Secret
type: kubernetes.io/tls
metadata:
  name: kuma-tls-cert
  namespace: kuma-system
  labels:
    helm.sh/chart: kuma-0.7.1
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: kuma
    app.kubernetes.io/version: "1.3.1"
    app.kubernetes.io/managed-by: Helm
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURhakNDQWxLZ0F3SUJBZ0lRRmQ5SnZka1F4WWlXR0ttWW9TMG5BekFOQmdrcWhraUc5dzBCQVFzRkFEQVMKTVJBd0RnWURWUVFERXdkcmRXMWhMV05oTUI0WERUSXhNVEV5TWpFNU1UZ3dNRm9YRFRNeE1URXlNREU1TVRndwpNRm93SFRFYk1Ca0dBMVVFQXhNU2EzVnRZUzFqYjI1MGNtOXNMWEJzWVc1bE1JSUJJakFOQmdrcWhraUc5dzBCCkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXA0N3dHbFY2KzRmcTNXYmZ3NDhEbEtMVnpNZFdEaUlENWpyUHVEN3gKK0dsMlk5TVRzMnd6YTdEV3k0TnliZWVSUTdqQ2x0TjBkbExwaDFBYlI0a0FBRDQ0RDZsUGdzVWRWWHNoQmFhcwpKQm5pKytGRVNpYVlOU3drM3lteHpjKzVGd2FBMEtLN3FvNGRiWU5OL0tnc3dHbFA5cjFEWlZJQStZdHh0N2ZSCkVSYlY2K1RDVzdvTU9NUDFQN1Q5ZDZEMVFlcGd0VXFLb2k1eU5WS3g5N1YySmttOU9GMXlqcDBXNlZvSmswVGQKVmM0cWRJbmhjaGN0K2cvTWJqb3ZHREVxaml3aWs1dWJUZjY1cW1wN3ZrNnVGelQ1Sm04Z3hOdHVaeXVFeWMydApMQi82b3VacFRqaUxTZGlvRmQvQ01ubFZ3SFRkcW1qQlhxdEhYQ2xIeTBSNVZRSURBUUFCbzRHd01JR3RNQTRHCkExVWREd0VCL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWUQKVlIwVEFRSC9CQUl3QURBZkJnTlZIU01FR0RBV2dCUnlFUWM2cFJlWlZlckJCNld5Ukx4WnVpUWdjVEJOQmdOVgpIUkVFUmpCRWdoNXJkVzFoTFdOdmJuUnliMnd0Y0d4aGJtVXVhM1Z0WVMxemVYTjBaVzJDSW10MWJXRXRZMjl1CmRISnZiQzF3YkdGdVpTNXJkVzFoTFhONWMzUmxiUzV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFHc2cKeTFNT3ZGOFRSdXl5Y1JnU2hQeFUvdkFxUHBxR1JjdEY1ZklkRTAyK291c1RQTHNSMjdpdjdObFFQbkszYmFsUwpxNmxNVjlDOTFyQVBHOWpEVnUxR2JJRjZvYUxwSlZ5M1AwdEtWM1hWUXMxcXZDRUtzdGRXcDd6ZHVHeGFOVFZGCnBKN1ZaR1ZPbVVZVmR0eWR1Y0JSNWZWamtCeE9uL2lqbDdQYXExc3BhVkdtdEtsblMrbThjbUc4MHZLRDJBb3EKeEVuTSs3bExvbWc1ZmZLQmdyVmxnREJ6VnpNOW9SM3JJTkZSblEyZXNWbVhXN0FYbDcvUndlcElZUmYzeGZjRQptN1Fjd2NLcTZ4QmIwVzJnSmJaTEpzTFAzOCs3ZlBuY3RTVzFBVmRsUFdsRndWVDJISytMM0hTSHJoTDFMUTFuCkVESVNHaWtuNkY2YllxZDN3cUE9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBcDQ3d0dsVjYrNGZxM1diZnc0OERsS0xWek1kV0RpSUQ1anJQdUQ3eCtHbDJZOU1UCnMyd3phN0RXeTROeWJlZVJRN2pDbHROMGRsTHBoMUFiUjRrQUFENDRENmxQZ3NVZFZYc2hCYWFzSkJuaSsrRkUKU2lhWU5Td2szeW14emMrNUZ3YUEwS0s3cW80ZGJZTk4vS2dzd0dsUDlyMURaVklBK1l0eHQ3ZlJFUmJWNitUQwpXN29NT01QMVA3VDlkNkQxUWVwZ3RVcUtvaTV5TlZLeDk3VjJKa205T0YxeWpwMFc2Vm9KazBUZFZjNHFkSW5oCmNoY3QrZy9NYmpvdkdERXFqaXdpazV1YlRmNjVxbXA3dms2dUZ6VDVKbThneE50dVp5dUV5YzJ0TEIvNm91WnAKVGppTFNkaW9GZC9DTW5sVndIVGRxbWpCWHF0SFhDbEh5MFI1VlFJREFRQUJBb0lCQVFDYkVGTHZhL0FXV3lCbApxTkNuLy9BR1cvT1VRVjFJVXY1YzBFeHZiQUV1TFJ0ZEluZjI4Y2xjZmhrcDJnbko0Q1cxRUlVMFk1aEI4RlVoCjNtYUFleTYvQ3RXQzJPTTJXQWpmbE1Wb24yaHJPSEd4UERXZ2tic0dha1h0S0g3ZHdzQzlxRTBKeDYvNUZPL3kKNnpML0FQdjVUUHl0a1ZXUHJLWXVTbmdBMTJIcGQwTURZQVFZcUxrejZVM3MrcWk0bnJQTEtRQWRmQWc3eWo1YgpqUVQ0R1huRmRWeHdrcWFwc2swZ09PWktKOGtZc3VUTXo2bXNBeVRJN3REUW5sSFR5aWZDWHlCcXVEQVBlV28zClpZN2Z0R04zR1FROWlLZUgwN0lVdVN5Ylk0MFUzb1lodWc1YzYrV2ZLRXFiOFp2L2t6bkFRNXVZL3A1dlJocHoKQ3hvd1Z6ZEJBb0dCQU5idDdCR25iRW5MWlVqNmFnZ3Y4d2tKZGFWVDkxMXBiS3JsK3JJZUFlK0cyTGY1MVpZUgpHNjRuWXpmdXpoZmt5a01tQ1psaTBiSURma0NoWjd1TGJYanJMLzkzR1U3VEJMRWFMNUZJdHY5VXM5NjFuRUJFCkJHelA5S0o2RVYyTjlINllnRXM0OTJBYkVIcDJreTF6ZmN1NFdzTitXSEczSzJxcWh3c1ZDK2w5QW9HQkFNZVQKcncvNS9PM1hWSVNlTTBFczhCMGYrc2liUngxSXdKWnVySmZpU09mTlFseldaVUM0SHpGaW1zUTVUV3JxeWhaVQpROU8vc2QvbDFxS3dPNnRJWGs4UEFPTDRlZnJ1NlVjU2RKMXVLSWdza3hJRmwxbEpwRVZhRk5says2NmxkUFZiCm1iMDkraUxzRU81cXV3c1VUS3NpYU5sQ2pVM1UwQzNtWVdnaGVCYTVBb0dBUlUvL05JWklydGV3TjBQQ2xCZGEKaWt5SnF5S1VBSVR5TFg3elJTUFdQZmUveGowRXUxdVRFS3ZWSElHZjV5YTZiOE5Canp6R0lXRnRBc3pLbGpuVgp1UXduczN3bUpqeDVJK0FzL081MVRZeDBZVnN5STZ1THZjZW12Z3NkdEkwR0R4bUJMa0VWemVHTWcrSGZmdVhpCjZLTHdhbUZCaHBLcXBzQ053bTRzSkVVQ2dZRUFxekVyUVhFV1hJNFFtWkY2TmJYdVlZMUUrVDc0eVUzV3BUTmEKS1E2WnF2eU9xRVBmcHB4SlpYdEhkbm9ReGwyUDY0ZHNodjR2L2ZhUkhndzlvcmI0N3FmWUF0bFJDTVpXby9oWQp2NUgyZ3BoNXIwUE1oM0o3em1GdThPdUdXRkRrK25JUWRodnJySGtDTFFDd1lOaVF5MXRBeE53cGlWRzdJU1EwCitiVjc1VUVDZ1lFQXF6MFBEN1BJWHBIWWVFd2Npd0tNcXF6aitET1VvU0ovUmptVU14UkxQNFJEQUVyei9BSGsKbnBmZXJyUm5LTVZiT1NlUGhWNFZkK2xPdEpDczNLdEhnWE5qUDNralV0NDlLVERRTlpVOW96TVFzRGNua0FraAorTm9nZEtXWlkxWStHL3NYRnphWXFDUXFzTkZJWEhVMlFKQ2lWamdoR05xeGdUcXFDbnc3SWx3PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFRENDQWZpZ0F3SUJBZ0lSQU85SnczU2J6WHVrTGFmSXpiWllOb0V3RFFZSktvWklodmNOQVFFTEJRQXcKRWpFUU1BNEdBMVVFQXhNSGEzVnRZUzFqWVRBZUZ3MHlNVEV4TWpJeE9URTNOVGxhRncwek1URXhNakF4T1RFMwpOVGxhTUJJeEVEQU9CZ05WQkFNVEIydDFiV0V0WTJFd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3CmdnRUtBb0lCQVFDb3RlbUhrSHZ3ZTFLdU5Tb01BSUFydkRGOStwQTEvcUpTb2Y2czBHM1FUUTZLcCtjcWp5ZXgKdG1IUWVGUThRSmNzNEdLaU83NklaRlFaM0creUhtRUw3WlR4L2VuYWxrUE9xc1M5d3J2dGI5ckY1MTQyK2ZaSApyUXRtWWtXTHk1OU5USmVvL0ZPOGUxNFhMK0dFa2xLQWVoM0Nia1ZtQXhLLzBZaXloOUdHNnB1dWJ5Vm03L0VNCm00Z016RkIxWnY2ZmtmNlhFTXlmeTlFU3Y2VG9GWGFQbUowMGV1WTJhWDloakxObjNMSTNpdVRHWkxaWFdDUk0KTE5ScU5KWk5pVE5wWDU1ZjZOSTB1ZjlOdWg3U1Vid3NndzVFZWxwQTZXejhucms2aFVhOVp3NHdJakI1RW5qcwpobmRjaGlVWEg2bFllc1N5MiswcUhQemo1R1JpNzIyREFnTUJBQUdqWVRCZk1BNEdBMVVkRHdFQi93UUVBd0lDCnBEQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3RHdZRFZSMFRBUUgvQkFVd0F3RUIKL3pBZEJnTlZIUTRFRmdRVWNoRUhPcVVYbVZYcXdRZWxza1M4V2Jva0lIRXdEUVlKS29aSWh2Y05BUUVMQlFBRApnZ0VCQUNGRzh5NUhXaHBzekFCWlgvSTdwTGZpWTg1QUxzVkdzNFozdDBpVHRrTW1CYjBNQkt3T2RQc2RHUEVICmNJTVNuWHJKNUtCRzJtbWM0VjB0dS9GcS9Dd1pXOE1tdm5MNkJCelpyQ0MrVDRVd1NtM1A4NW13Z2NDQmFnRysKdmFIbUxPc2drWW5ZUGo0WDJDTks0d25HbFhVN2FFU2gvVSttbU1LQWZSeDcwTTNtbEhDL2dHdy9EQ2lRTU5JVQpKWlJRc0ZHWC9kOVdPTDhhb3pGcXBlUE9GTWZUUzVCRjlzVnZkN3JXbjNwYzltaklFWlFHdTNobEFKbHlJL1FoCm5hS2I3VXRlOU5RV0pWZ0g0U3VnWEFaL3dpVVdDRHpWSWpndzFSU1RJMC9JT1owQnJxTGRiejllWFpYWlVUMVcKUVI2RmhyZStiRjFueEdock5ZMFQ3cjc0b0gwPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
---
# Source: kuma/templates/cp-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kuma-control-plane-config
  namespace: kuma-system
  labels:
    helm.sh/chart: kuma-0.7.1
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: kuma
    app.kubernetes.io/version: "1.3.1"
    app.kubernetes.io/managed-by: Helm
data:
  config.yaml: |
    # use this file to override default configuration of `kuma-cp`
    #
    # see conf/kuma-cp.conf.yml for available settings
---
# Source: kuma/templates/cp-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kuma-control-plane
  labels:
    helm.sh/chart: kuma-0.7.1
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: kuma
    app.kubernetes.io/version: "1.3.1"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
      - pods
      - configmaps
      - nodes
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - kuma.io
    resources:
      - dataplanes
      - dataplaneinsights
      - meshes
      - zones
      - zoneinsights
      - zoneingresses
      - zoneingressinsights
      - meshinsights
      - serviceinsights
      - proxytemplates
      - ratelimits
      - trafficpermissions
      - trafficroutes
      - timeouts
      - retries
      - circuitbreakers
      - virtualoutbounds
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - kuma.io
    resources:
      - externalservices
      - faultinjections
      - healthchecks
      - trafficlogs
      - traffictraces
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - pods/finalizers
    verbs:
      - "*"
  - apiGroups:
      - kuma.io
    resources:
      - meshes/finalizers
    verbs:
      - "*"
  - apiGroups:
      - kuma.io
    resources:
      - dataplanes/finalizers
    verbs:
      - "*"
  # validate k8s token before issuing mTLS cert
  - apiGroups:
      - authentication.k8s.io
    resources:
      - tokenreviews
    verbs:
      - create
---
# Source: kuma/templates/cp-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kuma-control-plane
  labels:
    helm.sh/chart: kuma-0.7.1
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: kuma
    app.kubernetes.io/version: "1.3.1"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kuma-control-plane
subjects:
  - kind: ServiceAccount
    name: kuma-control-plane
    namespace: kuma-system
---
# Source: kuma/templates/cp-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: kuma-control-plane
  namespace: kuma-system
  labels:
    helm.sh/chart: kuma-0.7.1
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: kuma
    app.kubernetes.io/version: "1.3.1"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
---
# Source: kuma/templates/cp-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kuma-control-plane
  namespace: kuma-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kuma-control-plane
subjects:
  - kind: ServiceAccount
    name: kuma-control-plane
    namespace: kuma-system
---
# Source: kuma/templates/cp-global-sync-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: kuma-global-zone-sync
  namespace: kuma-system
  annotations:
spec:
  type: LoadBalancer
  ports:
    - port: 5685
      name: global-zone-sync
  selector:
  
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: kuma
---
# Source: kuma/templates/cp-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: kuma-control-plane
  namespace: kuma-system
  labels:
    helm.sh/chart: kuma-0.7.1
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: kuma
    app.kubernetes.io/version: "1.3.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "5680"
spec:
  type: ClusterIP
  ports:
    - port: 5681
      name: http-api-server
    - port: 5682
      name: https-api-server
    - port: 443
      name: https-admission-server
      targetPort: 5443
  selector:
    app: kuma-control-plane
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: kuma
---
# Source: kuma/templates/cp-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kuma-control-plane
  namespace: kuma-system
  labels:
    helm.sh/chart: kuma-0.7.1
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: kuma
    app.kubernetes.io/version: "1.3.1"
    app.kubernetes.io/managed-by: Helm
    app: kuma-control-plane
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: kuma
      app.kubernetes.io/instance: kuma
      app: kuma-control-plane
  template:
    metadata:
      annotations:
        checksum/config: 003c3e67518c0669b2aa9b652d392cb44ea07d671f5180cc1596fbeb44a7110d
        checksum/tls-secrets: 88dd2357237f0291ae9c5297d7e69044678f479acf1634644557cf1d6430981a
      labels:
        app.kubernetes.io/name: kuma
        app.kubernetes.io/instance: kuma
        app: kuma-control-plane
    spec:
      serviceAccountName: kuma-control-plane
      nodeSelector:
        
        kubernetes.io/arch: amd64
        kubernetes.io/os: linux
      containers:
        - name: control-plane
          image: "docker.io/kumahq/kuma-cp:1.3.1"
          imagePullPolicy: IfNotPresent
          env:
            - name: KUMA_API_SERVER_READ_ONLY
              value: "true"
            - name: KUMA_DEFAULTS_SKIP_MESH_CREATION
              value: "false"
            - name: KUMA_DP_SERVER_HDS_ENABLED
              value: "false"
            - name: KUMA_ENVIRONMENT
              value: "kubernetes"
            - name: KUMA_GENERAL_TLS_CERT_FILE
              value: "/var/run/secrets/kuma.io/tls-cert/tls.crt"
            - name: KUMA_GENERAL_TLS_KEY_FILE
              value: "/var/run/secrets/kuma.io/tls-cert/tls.key"
            - name: KUMA_INJECTOR_INIT_CONTAINER_IMAGE
              value: "docker.io/kumahq/kuma-init:1.3.1"
            - name: KUMA_MODE
              value: "global"
            - name: KUMA_RUNTIME_KUBERNETES_ADMISSION_SERVER_CERT_DIR
              value: "/var/run/secrets/kuma.io/tls-cert"
            - name: KUMA_RUNTIME_KUBERNETES_ADMISSION_SERVER_PORT
              value: "5443"
            - name: KUMA_RUNTIME_KUBERNETES_CONTROL_PLANE_SERVICE_NAME
              value: "kuma-control-plane"
            - name: KUMA_RUNTIME_KUBERNETES_INJECTOR_CA_CERT_FILE
              value: "/var/run/secrets/kuma.io/tls-cert/ca.crt"
            - name: KUMA_RUNTIME_KUBERNETES_INJECTOR_CNI_ENABLED
              value: "false"
            - name: KUMA_RUNTIME_KUBERNETES_INJECTOR_SIDECAR_CONTAINER_IMAGE
              value: "docker.io/kumahq/kuma-dp:1.3.1"
            - name: KUMA_STORE_KUBERNETES_SYSTEM_NAMESPACE
              value: "kuma-system"
            - name: KUMA_STORE_TYPE
              value: "kubernetes"
          args:
            - run
            - --log-level=info
            - --config-file=/etc/kuma.io/kuma-control-plane/config.yaml
          ports:
            - containerPort: 5681
            - containerPort: 5682
            - containerPort: 5443
          livenessProbe:
            httpGet:
              path: /healthy
              port: 5680
          readinessProbe:
            httpGet:
              path: /ready
              port: 5680
          resources:
            requests:
              cpu: 500m
              memory: 256Mi
          volumeMounts:
            - name: general-tls-cert
              mountPath: /var/run/secrets/kuma.io/tls-cert
              readOnly: true
            - name: kuma-control-plane-config
              mountPath: /etc/kuma.io/kuma-control-plane
              readOnly: true
      volumes:
        - name: general-tls-cert
          secret:
            secretName: kuma-tls-cert
        - name: kuma-control-plane-config
          configMap:
            name: kuma-control-plane-config
---
# Source: kuma/templates/cp-webhooks-and-secrets.yaml
apiVersion: admissionregistration.k8s.io/v1

kind: MutatingWebhookConfiguration
metadata:
  name: kuma-admission-mutating-webhook-configuration
  namespace: kuma-system
  labels:
  
    helm.sh/chart: kuma-0.7.1
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: kuma
    app.kubernetes.io/version: "1.3.1"
    app.kubernetes.io/managed-by: Helm
webhooks:
  - name: mesh.defaulter.kuma-admission.kuma.io
    admissionReviewVersions: ["v1beta1"]
    failurePolicy: Fail
    clientConfig:
      caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFRENDQWZpZ0F3SUJBZ0lSQU85SnczU2J6WHVrTGFmSXpiWllOb0V3RFFZSktvWklodmNOQVFFTEJRQXcKRWpFUU1BNEdBMVVFQXhNSGEzVnRZUzFqWVRBZUZ3MHlNVEV4TWpJeE9URTNOVGxhRncwek1URXhNakF4T1RFMwpOVGxhTUJJeEVEQU9CZ05WQkFNVEIydDFiV0V0WTJFd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3CmdnRUtBb0lCQVFDb3RlbUhrSHZ3ZTFLdU5Tb01BSUFydkRGOStwQTEvcUpTb2Y2czBHM1FUUTZLcCtjcWp5ZXgKdG1IUWVGUThRSmNzNEdLaU83NklaRlFaM0creUhtRUw3WlR4L2VuYWxrUE9xc1M5d3J2dGI5ckY1MTQyK2ZaSApyUXRtWWtXTHk1OU5USmVvL0ZPOGUxNFhMK0dFa2xLQWVoM0Nia1ZtQXhLLzBZaXloOUdHNnB1dWJ5Vm03L0VNCm00Z016RkIxWnY2ZmtmNlhFTXlmeTlFU3Y2VG9GWGFQbUowMGV1WTJhWDloakxObjNMSTNpdVRHWkxaWFdDUk0KTE5ScU5KWk5pVE5wWDU1ZjZOSTB1ZjlOdWg3U1Vid3NndzVFZWxwQTZXejhucms2aFVhOVp3NHdJakI1RW5qcwpobmRjaGlVWEg2bFllc1N5MiswcUhQemo1R1JpNzIyREFnTUJBQUdqWVRCZk1BNEdBMVVkRHdFQi93UUVBd0lDCnBEQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3RHdZRFZSMFRBUUgvQkFVd0F3RUIKL3pBZEJnTlZIUTRFRmdRVWNoRUhPcVVYbVZYcXdRZWxza1M4V2Jva0lIRXdEUVlKS29aSWh2Y05BUUVMQlFBRApnZ0VCQUNGRzh5NUhXaHBzekFCWlgvSTdwTGZpWTg1QUxzVkdzNFozdDBpVHRrTW1CYjBNQkt3T2RQc2RHUEVICmNJTVNuWHJKNUtCRzJtbWM0VjB0dS9GcS9Dd1pXOE1tdm5MNkJCelpyQ0MrVDRVd1NtM1A4NW13Z2NDQmFnRysKdmFIbUxPc2drWW5ZUGo0WDJDTks0d25HbFhVN2FFU2gvVSttbU1LQWZSeDcwTTNtbEhDL2dHdy9EQ2lRTU5JVQpKWlJRc0ZHWC9kOVdPTDhhb3pGcXBlUE9GTWZUUzVCRjlzVnZkN3JXbjNwYzltaklFWlFHdTNobEFKbHlJL1FoCm5hS2I3VXRlOU5RV0pWZ0g0U3VnWEFaL3dpVVdDRHpWSWpndzFSU1RJMC9JT1owQnJxTGRiejllWFpYWlVUMVcKUVI2RmhyZStiRjFueEdock5ZMFQ3cjc0b0gwPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
      service:
        namespace: kuma-system
        name: kuma-control-plane
        path: /default-kuma-io-v1alpha1-mesh
    rules:
      - apiGroups:
          - kuma.io
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
        resources:
          - meshes
    sideEffects: None
  - name: owner-reference.kuma-admission.kuma.io
    admissionReviewVersions: ["v1beta1"]
    failurePolicy: Fail
    clientConfig:
      caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFRENDQWZpZ0F3SUJBZ0lSQU85SnczU2J6WHVrTGFmSXpiWllOb0V3RFFZSktvWklodmNOQVFFTEJRQXcKRWpFUU1BNEdBMVVFQXhNSGEzVnRZUzFqWVRBZUZ3MHlNVEV4TWpJeE9URTNOVGxhRncwek1URXhNakF4T1RFMwpOVGxhTUJJeEVEQU9CZ05WQkFNVEIydDFiV0V0WTJFd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3CmdnRUtBb0lCQVFDb3RlbUhrSHZ3ZTFLdU5Tb01BSUFydkRGOStwQTEvcUpTb2Y2czBHM1FUUTZLcCtjcWp5ZXgKdG1IUWVGUThRSmNzNEdLaU83NklaRlFaM0creUhtRUw3WlR4L2VuYWxrUE9xc1M5d3J2dGI5ckY1MTQyK2ZaSApyUXRtWWtXTHk1OU5USmVvL0ZPOGUxNFhMK0dFa2xLQWVoM0Nia1ZtQXhLLzBZaXloOUdHNnB1dWJ5Vm03L0VNCm00Z016RkIxWnY2ZmtmNlhFTXlmeTlFU3Y2VG9GWGFQbUowMGV1WTJhWDloakxObjNMSTNpdVRHWkxaWFdDUk0KTE5ScU5KWk5pVE5wWDU1ZjZOSTB1ZjlOdWg3U1Vid3NndzVFZWxwQTZXejhucms2aFVhOVp3NHdJakI1RW5qcwpobmRjaGlVWEg2bFllc1N5MiswcUhQemo1R1JpNzIyREFnTUJBQUdqWVRCZk1BNEdBMVVkRHdFQi93UUVBd0lDCnBEQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3RHdZRFZSMFRBUUgvQkFVd0F3RUIKL3pBZEJnTlZIUTRFRmdRVWNoRUhPcVVYbVZYcXdRZWxza1M4V2Jva0lIRXdEUVlKS29aSWh2Y05BUUVMQlFBRApnZ0VCQUNGRzh5NUhXaHBzekFCWlgvSTdwTGZpWTg1QUxzVkdzNFozdDBpVHRrTW1CYjBNQkt3T2RQc2RHUEVICmNJTVNuWHJKNUtCRzJtbWM0VjB0dS9GcS9Dd1pXOE1tdm5MNkJCelpyQ0MrVDRVd1NtM1A4NW13Z2NDQmFnRysKdmFIbUxPc2drWW5ZUGo0WDJDTks0d25HbFhVN2FFU2gvVSttbU1LQWZSeDcwTTNtbEhDL2dHdy9EQ2lRTU5JVQpKWlJRc0ZHWC9kOVdPTDhhb3pGcXBlUE9GTWZUUzVCRjlzVnZkN3JXbjNwYzltaklFWlFHdTNobEFKbHlJL1FoCm5hS2I3VXRlOU5RV0pWZ0g0U3VnWEFaL3dpVVdDRHpWSWpndzFSU1RJMC9JT1owQnJxTGRiejllWFpYWlVUMVcKUVI2RmhyZStiRjFueEdock5ZMFQ3cjc0b0gwPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
      service:
        namespace: kuma-system
        name: kuma-control-plane
        path: /owner-reference-kuma-io-v1alpha1
    rules:
      - apiGroups:
          - kuma.io
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
        resources:
          - circuitbreakers
          - externalservices
          - faultinjections
          - healthchecks
          - retries
          - proxytemplates
          - ratelimits
          - trafficlogs
          - trafficpermissions
          - trafficroutes
          - traffictraces
          - virtualoutbounds
    
      
    sideEffects: None
  - name: kuma-injector.kuma.io
    admissionReviewVersions: ["v1beta1"]
    failurePolicy: Ignore
    clientConfig:
      caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFRENDQWZpZ0F3SUJBZ0lSQU85SnczU2J6WHVrTGFmSXpiWllOb0V3RFFZSktvWklodmNOQVFFTEJRQXcKRWpFUU1BNEdBMVVFQXhNSGEzVnRZUzFqWVRBZUZ3MHlNVEV4TWpJeE9URTNOVGxhRncwek1URXhNakF4T1RFMwpOVGxhTUJJeEVEQU9CZ05WQkFNVEIydDFiV0V0WTJFd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3CmdnRUtBb0lCQVFDb3RlbUhrSHZ3ZTFLdU5Tb01BSUFydkRGOStwQTEvcUpTb2Y2czBHM1FUUTZLcCtjcWp5ZXgKdG1IUWVGUThRSmNzNEdLaU83NklaRlFaM0creUhtRUw3WlR4L2VuYWxrUE9xc1M5d3J2dGI5ckY1MTQyK2ZaSApyUXRtWWtXTHk1OU5USmVvL0ZPOGUxNFhMK0dFa2xLQWVoM0Nia1ZtQXhLLzBZaXloOUdHNnB1dWJ5Vm03L0VNCm00Z016RkIxWnY2ZmtmNlhFTXlmeTlFU3Y2VG9GWGFQbUowMGV1WTJhWDloakxObjNMSTNpdVRHWkxaWFdDUk0KTE5ScU5KWk5pVE5wWDU1ZjZOSTB1ZjlOdWg3U1Vid3NndzVFZWxwQTZXejhucms2aFVhOVp3NHdJakI1RW5qcwpobmRjaGlVWEg2bFllc1N5MiswcUhQemo1R1JpNzIyREFnTUJBQUdqWVRCZk1BNEdBMVVkRHdFQi93UUVBd0lDCnBEQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3RHdZRFZSMFRBUUgvQkFVd0F3RUIKL3pBZEJnTlZIUTRFRmdRVWNoRUhPcVVYbVZYcXdRZWxza1M4V2Jva0lIRXdEUVlKS29aSWh2Y05BUUVMQlFBRApnZ0VCQUNGRzh5NUhXaHBzekFCWlgvSTdwTGZpWTg1QUxzVkdzNFozdDBpVHRrTW1CYjBNQkt3T2RQc2RHUEVICmNJTVNuWHJKNUtCRzJtbWM0VjB0dS9GcS9Dd1pXOE1tdm5MNkJCelpyQ0MrVDRVd1NtM1A4NW13Z2NDQmFnRysKdmFIbUxPc2drWW5ZUGo0WDJDTks0d25HbFhVN2FFU2gvVSttbU1LQWZSeDcwTTNtbEhDL2dHdy9EQ2lRTU5JVQpKWlJRc0ZHWC9kOVdPTDhhb3pGcXBlUE9GTWZUUzVCRjlzVnZkN3JXbjNwYzltaklFWlFHdTNobEFKbHlJL1FoCm5hS2I3VXRlOU5RV0pWZ0g0U3VnWEFaL3dpVVdDRHpWSWpndzFSU1RJMC9JT1owQnJxTGRiejllWFpYWlVUMVcKUVI2RmhyZStiRjFueEdock5ZMFQ3cjc0b0gwPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
      service:
        namespace: kuma-system
        name: kuma-control-plane
        path: /inject-sidecar
    rules:
      - apiGroups:
          - ""
        apiVersions:
          - v1
        operations:
          - CREATE
        resources:
          - pods
    sideEffects: None
---
# Source: kuma/templates/cp-webhooks-and-secrets.yaml
apiVersion: admissionregistration.k8s.io/v1

kind: ValidatingWebhookConfiguration
metadata:
  name: kuma-validating-webhook-configuration
  namespace: kuma-system
  labels:
  
    helm.sh/chart: kuma-0.7.1
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: kuma
    app.kubernetes.io/version: "1.3.1"
    app.kubernetes.io/managed-by: Helm
webhooks:
  - name: validator.kuma-admission.kuma.io
    admissionReviewVersions: ["v1beta1"]
    failurePolicy: Fail
    clientConfig:
      caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFRENDQWZpZ0F3SUJBZ0lSQU85SnczU2J6WHVrTGFmSXpiWllOb0V3RFFZSktvWklodmNOQVFFTEJRQXcKRWpFUU1BNEdBMVVFQXhNSGEzVnRZUzFqWVRBZUZ3MHlNVEV4TWpJeE9URTNOVGxhRncwek1URXhNakF4T1RFMwpOVGxhTUJJeEVEQU9CZ05WQkFNVEIydDFiV0V0WTJFd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3CmdnRUtBb0lCQVFDb3RlbUhrSHZ3ZTFLdU5Tb01BSUFydkRGOStwQTEvcUpTb2Y2czBHM1FUUTZLcCtjcWp5ZXgKdG1IUWVGUThRSmNzNEdLaU83NklaRlFaM0creUhtRUw3WlR4L2VuYWxrUE9xc1M5d3J2dGI5ckY1MTQyK2ZaSApyUXRtWWtXTHk1OU5USmVvL0ZPOGUxNFhMK0dFa2xLQWVoM0Nia1ZtQXhLLzBZaXloOUdHNnB1dWJ5Vm03L0VNCm00Z016RkIxWnY2ZmtmNlhFTXlmeTlFU3Y2VG9GWGFQbUowMGV1WTJhWDloakxObjNMSTNpdVRHWkxaWFdDUk0KTE5ScU5KWk5pVE5wWDU1ZjZOSTB1ZjlOdWg3U1Vid3NndzVFZWxwQTZXejhucms2aFVhOVp3NHdJakI1RW5qcwpobmRjaGlVWEg2bFllc1N5MiswcUhQemo1R1JpNzIyREFnTUJBQUdqWVRCZk1BNEdBMVVkRHdFQi93UUVBd0lDCnBEQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3RHdZRFZSMFRBUUgvQkFVd0F3RUIKL3pBZEJnTlZIUTRFRmdRVWNoRUhPcVVYbVZYcXdRZWxza1M4V2Jva0lIRXdEUVlKS29aSWh2Y05BUUVMQlFBRApnZ0VCQUNGRzh5NUhXaHBzekFCWlgvSTdwTGZpWTg1QUxzVkdzNFozdDBpVHRrTW1CYjBNQkt3T2RQc2RHUEVICmNJTVNuWHJKNUtCRzJtbWM0VjB0dS9GcS9Dd1pXOE1tdm5MNkJCelpyQ0MrVDRVd1NtM1A4NW13Z2NDQmFnRysKdmFIbUxPc2drWW5ZUGo0WDJDTks0d25HbFhVN2FFU2gvVSttbU1LQWZSeDcwTTNtbEhDL2dHdy9EQ2lRTU5JVQpKWlJRc0ZHWC9kOVdPTDhhb3pGcXBlUE9GTWZUUzVCRjlzVnZkN3JXbjNwYzltaklFWlFHdTNobEFKbHlJL1FoCm5hS2I3VXRlOU5RV0pWZ0g0U3VnWEFaL3dpVVdDRHpWSWpndzFSU1RJMC9JT1owQnJxTGRiejllWFpYWlVUMVcKUVI2RmhyZStiRjFueEdock5ZMFQ3cjc0b0gwPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
      service:
        namespace: kuma-system
        name: kuma-control-plane
        path: /validate-kuma-io-v1alpha1
    rules:
      - apiGroups:
          - kuma.io
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
          - DELETE
        resources:
          - circuitbreakers
          - dataplanes
          - externalservices
          - faultinjections
          - healthchecks
          - retries
          - meshes
          - proxytemplates
          - ratelimits
          - trafficlogs
          - trafficpermissions
          - trafficroutes
          - traffictraces
          - virtualoutbounds
          - zones
    
      
    sideEffects: None
  - name: service.validator.kuma-admission.kuma.io
    admissionReviewVersions: ["v1beta1"]
    failurePolicy: Ignore
    clientConfig:
      caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFRENDQWZpZ0F3SUJBZ0lSQU85SnczU2J6WHVrTGFmSXpiWllOb0V3RFFZSktvWklodmNOQVFFTEJRQXcKRWpFUU1BNEdBMVVFQXhNSGEzVnRZUzFqWVRBZUZ3MHlNVEV4TWpJeE9URTNOVGxhRncwek1URXhNakF4T1RFMwpOVGxhTUJJeEVEQU9CZ05WQkFNVEIydDFiV0V0WTJFd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3CmdnRUtBb0lCQVFDb3RlbUhrSHZ3ZTFLdU5Tb01BSUFydkRGOStwQTEvcUpTb2Y2czBHM1FUUTZLcCtjcWp5ZXgKdG1IUWVGUThRSmNzNEdLaU83NklaRlFaM0creUhtRUw3WlR4L2VuYWxrUE9xc1M5d3J2dGI5ckY1MTQyK2ZaSApyUXRtWWtXTHk1OU5USmVvL0ZPOGUxNFhMK0dFa2xLQWVoM0Nia1ZtQXhLLzBZaXloOUdHNnB1dWJ5Vm03L0VNCm00Z016RkIxWnY2ZmtmNlhFTXlmeTlFU3Y2VG9GWGFQbUowMGV1WTJhWDloakxObjNMSTNpdVRHWkxaWFdDUk0KTE5ScU5KWk5pVE5wWDU1ZjZOSTB1ZjlOdWg3U1Vid3NndzVFZWxwQTZXejhucms2aFVhOVp3NHdJakI1RW5qcwpobmRjaGlVWEg2bFllc1N5MiswcUhQemo1R1JpNzIyREFnTUJBQUdqWVRCZk1BNEdBMVVkRHdFQi93UUVBd0lDCnBEQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3RHdZRFZSMFRBUUgvQkFVd0F3RUIKL3pBZEJnTlZIUTRFRmdRVWNoRUhPcVVYbVZYcXdRZWxza1M4V2Jva0lIRXdEUVlKS29aSWh2Y05BUUVMQlFBRApnZ0VCQUNGRzh5NUhXaHBzekFCWlgvSTdwTGZpWTg1QUxzVkdzNFozdDBpVHRrTW1CYjBNQkt3T2RQc2RHUEVICmNJTVNuWHJKNUtCRzJtbWM0VjB0dS9GcS9Dd1pXOE1tdm5MNkJCelpyQ0MrVDRVd1NtM1A4NW13Z2NDQmFnRysKdmFIbUxPc2drWW5ZUGo0WDJDTks0d25HbFhVN2FFU2gvVSttbU1LQWZSeDcwTTNtbEhDL2dHdy9EQ2lRTU5JVQpKWlJRc0ZHWC9kOVdPTDhhb3pGcXBlUE9GTWZUUzVCRjlzVnZkN3JXbjNwYzltaklFWlFHdTNobEFKbHlJL1FoCm5hS2I3VXRlOU5RV0pWZ0g0U3VnWEFaL3dpVVdDRHpWSWpndzFSU1RJMC9JT1owQnJxTGRiejllWFpYWlVUMVcKUVI2RmhyZStiRjFueEdock5ZMFQ3cjc0b0gwPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
      service:
        namespace: kuma-system
        name: kuma-control-plane
        path: /validate-v1-service
    rules:
      - apiGroups:
          - ""
        apiVersions:
          - v1
        operations:
          - CREATE
          - UPDATE
        resources:
          - services
    sideEffects: None
  - name: secret.validator.kuma-admission.kuma.io
    admissionReviewVersions: ["v1beta1"]
    namespaceSelector:
      matchLabels:
        kuma.io/system-namespace: "true"
    failurePolicy: Ignore
    clientConfig:
      caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFRENDQWZpZ0F3SUJBZ0lSQU85SnczU2J6WHVrTGFmSXpiWllOb0V3RFFZSktvWklodmNOQVFFTEJRQXcKRWpFUU1BNEdBMVVFQXhNSGEzVnRZUzFqWVRBZUZ3MHlNVEV4TWpJeE9URTNOVGxhRncwek1URXhNakF4T1RFMwpOVGxhTUJJeEVEQU9CZ05WQkFNVEIydDFiV0V0WTJFd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3CmdnRUtBb0lCQVFDb3RlbUhrSHZ3ZTFLdU5Tb01BSUFydkRGOStwQTEvcUpTb2Y2czBHM1FUUTZLcCtjcWp5ZXgKdG1IUWVGUThRSmNzNEdLaU83NklaRlFaM0creUhtRUw3WlR4L2VuYWxrUE9xc1M5d3J2dGI5ckY1MTQyK2ZaSApyUXRtWWtXTHk1OU5USmVvL0ZPOGUxNFhMK0dFa2xLQWVoM0Nia1ZtQXhLLzBZaXloOUdHNnB1dWJ5Vm03L0VNCm00Z016RkIxWnY2ZmtmNlhFTXlmeTlFU3Y2VG9GWGFQbUowMGV1WTJhWDloakxObjNMSTNpdVRHWkxaWFdDUk0KTE5ScU5KWk5pVE5wWDU1ZjZOSTB1ZjlOdWg3U1Vid3NndzVFZWxwQTZXejhucms2aFVhOVp3NHdJakI1RW5qcwpobmRjaGlVWEg2bFllc1N5MiswcUhQemo1R1JpNzIyREFnTUJBQUdqWVRCZk1BNEdBMVVkRHdFQi93UUVBd0lDCnBEQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3RHdZRFZSMFRBUUgvQkFVd0F3RUIKL3pBZEJnTlZIUTRFRmdRVWNoRUhPcVVYbVZYcXdRZWxza1M4V2Jva0lIRXdEUVlKS29aSWh2Y05BUUVMQlFBRApnZ0VCQUNGRzh5NUhXaHBzekFCWlgvSTdwTGZpWTg1QUxzVkdzNFozdDBpVHRrTW1CYjBNQkt3T2RQc2RHUEVICmNJTVNuWHJKNUtCRzJtbWM0VjB0dS9GcS9Dd1pXOE1tdm5MNkJCelpyQ0MrVDRVd1NtM1A4NW13Z2NDQmFnRysKdmFIbUxPc2drWW5ZUGo0WDJDTks0d25HbFhVN2FFU2gvVSttbU1LQWZSeDcwTTNtbEhDL2dHdy9EQ2lRTU5JVQpKWlJRc0ZHWC9kOVdPTDhhb3pGcXBlUE9GTWZUUzVCRjlzVnZkN3JXbjNwYzltaklFWlFHdTNobEFKbHlJL1FoCm5hS2I3VXRlOU5RV0pWZ0g0U3VnWEFaL3dpVVdDRHpWSWpndzFSU1RJMC9JT1owQnJxTGRiejllWFpYWlVUMVcKUVI2RmhyZStiRjFueEdock5ZMFQ3cjc0b0gwPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
      service:
        namespace: kuma-system
        name: kuma-control-plane
        path: /validate-v1-secret
    rules:
      - apiGroups:
          - ""
        apiVersions:
          - v1
        operations:
          - CREATE
          - UPDATE
          - DELETE
        resources:
          - secrets
    sideEffects: None
---
# Source: kuma/templates/pre-delete-webhooks.yaml
# HELM first deletes RBAC of Kuma, then it tries to delete Secrets. We've got validating webhook on Secrets.
# But even that the policy of this webhook is Ignore, it fails because Kuma does not have permission to access Secrets anymore.
# Therefore we first need to delete webhook so we can delete the rest of the deployment
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kuma-pre-delete-job
  namespace: kuma-system
  annotations:
    "helm.sh/hook": "pre-delete"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
  labels:
    helm.sh/chart: kuma-0.7.1
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: kuma
    app.kubernetes.io/version: "1.3.1"
    app.kubernetes.io/managed-by: Helm
---
# Source: kuma/templates/pre-install-patch-namespace-job.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kuma-patch-ns-job
  namespace: kuma-system
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
  labels:
    helm.sh/chart: kuma-0.7.1
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: kuma
    app.kubernetes.io/version: "1.3.1"
    app.kubernetes.io/managed-by: Helm
---
# Source: kuma/templates/pre-upgrade-install-missing-crds-job.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kuma-install-missing-crds
  annotations:
    "helm.sh/hook": "pre-upgrade"
    "helm.sh/hook-weight": "-1"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
  labels:
    helm.sh/chart: kuma-0.7.1
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: kuma
    app.kubernetes.io/version: "1.3.1"
    app.kubernetes.io/managed-by: Helm
---
# Source: kuma/templates/pre-upgrade-install-missing-crds-job.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kuma-install-missing-crds-scripts
  namespace: kuma-system
  annotations:
    "helm.sh/hook": "pre-upgrade"
    "helm.sh/hook-weight": "-1"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
  labels:
    helm.sh/chart: kuma-0.7.1
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: kuma
    app.kubernetes.io/version: "1.3.1"
    app.kubernetes.io/managed-by: Helm
data:
  install_missing_crds.sh: |
    #!/usr/bin/env sh

    if [ -s /kuma/missing/crds.yaml ]; then
      echo "/kuma/missing/crds.yaml found and is not empty, adding crds"
      kubectl create -f /kuma/missing/crds.yaml
    else
      echo "/kuma/missing/crds.yaml not found or empty, it looks like there is no missing crds"
    fi
  save_missing_crds.sh: |
    #!/usr/bin/env sh

    missing_crds="$(kumactl install crds --only-missing)"

    if [ -n "${missing_crds}" ]; then
      echo "found missing crds - saving to /kuma/missing/crds.yaml"
      echo "${missing_crds}" > /kuma/missing/crds.yaml
    fi
---
# Source: kuma/templates/pre-delete-webhooks.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kuma-pre-delete-job
  annotations:
    "helm.sh/hook": "pre-delete"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
  labels:
    helm.sh/chart: kuma-0.7.1
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: kuma
    app.kubernetes.io/version: "1.3.1"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - admissionregistration.k8s.io
    resources:
      - validatingwebhookconfigurations
    resourceNames:
      - kuma-validating-webhook-configuration
    verbs:
      - delete
---
# Source: kuma/templates/pre-install-patch-namespace-job.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kuma-patch-ns-job
  namespace: kuma-system
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
  labels:
    helm.sh/chart: kuma-0.7.1
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: kuma
    app.kubernetes.io/version: "1.3.1"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
    resourceNames:
      - kuma-system
    verbs:
      - get
      - patch
---
# Source: kuma/templates/pre-upgrade-install-missing-crds-job.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kuma-install-missing-crds
  annotations:
    "helm.sh/hook": "pre-upgrade"
    "helm.sh/hook-weight": "-1"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
  labels:
    helm.sh/chart: kuma-0.7.1
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: kuma
    app.kubernetes.io/version: "1.3.1"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
    - "apiextensions.k8s.io"
    resources:
      - customresourcedefinitions
    verbs:
      - create
      - list
      - get
---
# Source: kuma/templates/pre-delete-webhooks.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kuma-pre-delete-job
  annotations:
    "helm.sh/hook": "pre-delete"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
  labels:
    helm.sh/chart: kuma-0.7.1
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: kuma
    app.kubernetes.io/version: "1.3.1"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kuma-pre-delete-job
subjects:
  - kind: ServiceAccount
    name: kuma-pre-delete-job
    namespace: kuma-system
---
# Source: kuma/templates/pre-install-patch-namespace-job.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kuma-patch-ns-job
  namespace: kuma-system
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
  labels:
    helm.sh/chart: kuma-0.7.1
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: kuma
    app.kubernetes.io/version: "1.3.1"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kuma-patch-ns-job
subjects:
  - kind: ServiceAccount
    name: kuma-patch-ns-job
    namespace: kuma-system
---
# Source: kuma/templates/pre-upgrade-install-missing-crds-job.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kuma-install-missing-crds
  annotations:
    "helm.sh/hook": "pre-upgrade"
    "helm.sh/hook-weight": "-1"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
  labels:
    helm.sh/chart: kuma-0.7.1
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: kuma
    app.kubernetes.io/version: "1.3.1"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kuma-install-missing-crds
subjects:
  - kind: ServiceAccount
    name: kuma-install-missing-crds
    namespace: kuma-system
---
# Source: kuma/templates/pre-delete-webhooks.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: kuma-delete-webhook
  namespace: kuma-system
  labels:
  
    helm.sh/chart: kuma-0.7.1
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: kuma
    app.kubernetes.io/version: "1.3.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": "pre-delete"
    
    "helm.sh/hook-weight": "5"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
spec:
  template:
    metadata:
      name: kuma-delete-webhook
      labels:
    
        helm.sh/chart: kuma-0.7.1
        app.kubernetes.io/name: kuma
        app.kubernetes.io/instance: kuma
        app.kubernetes.io/version: "1.3.1"
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: kuma-pre-delete-job
      nodeSelector:
      
        kubernetes.io/arch: amd64
        kubernetes.io/os: linux
      restartPolicy: OnFailure
      containers:
        - name: pre-delete-job
          image: "bitnami/kubectl:1.20"
          command:
            - 'kubectl'
            - 'delete'
            - 'ValidatingWebhookConfiguration'
            - kuma-validating-webhook-configuration
---
# Source: kuma/templates/pre-install-patch-namespace-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: kuma-patch-ns
  namespace: kuma-system
  labels:
  
    helm.sh/chart: kuma-0.7.1
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: kuma
    app.kubernetes.io/version: "1.3.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": "pre-install"
    
    "helm.sh/hook-weight": "5"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
spec:
  template:
    metadata:
      name: kuma-patch-ns-script
      labels:
    
        helm.sh/chart: kuma-0.7.1
        app.kubernetes.io/name: kuma
        app.kubernetes.io/instance: kuma
        app.kubernetes.io/version: "1.3.1"
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: kuma-patch-ns-job
      nodeSelector:
      
        kubernetes.io/arch: amd64
        kubernetes.io/os: linux
      restartPolicy: OnFailure
      containers:
        - name: pre-install-job
          image: "bitnami/kubectl:1.20"
          command:
            - 'kubectl'
            - 'patch'
            - 'namespace'
            - "kuma-system"
            - '--type'
            - 'merge'
            - '--patch'
            - '{ "metadata": { "labels": { "kuma.io/system-namespace": "true" } } }'
---
# Source: kuma/templates/pre-upgrade-install-missing-crds-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: kuma-install-missing-crds
  namespace: kuma-system
  labels:
  
    helm.sh/chart: kuma-0.7.1
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: kuma
    app.kubernetes.io/version: "1.3.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": "pre-upgrade"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
spec:
  template:
    metadata:
      name: kuma-install-missing-crds-job
      labels:
    
        helm.sh/chart: kuma-0.7.1
        app.kubernetes.io/name: kuma
        app.kubernetes.io/instance: kuma
        app.kubernetes.io/version: "1.3.1"
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: kuma-install-missing-crds
      nodeSelector:
      
        kubernetes.io/arch: amd64
        kubernetes.io/os: linux
      restartPolicy: OnFailure
      containers:
        - name: pre-upgrade-job
          image: "bitnami/kubectl:1.20"
          command:
            - '/kuma/scripts/install_missing_crds.sh'
          volumeMounts:
            - mountPath: /kuma/missing
              name: missing-crds
              readOnly: true
            - mountPath: /kuma/scripts
              name: scripts
              readOnly: true
      initContainers:
        - name: pre-upgrade-job-init
          image: "docker.io/kumahq/kumactl:1.3.1"
          volumeMounts:
          - mountPath: /kuma/missing
            name: missing-crds
          - mountPath: /kuma/scripts
            name: scripts
            readOnly: true
          command:
          - '/kuma/scripts/save_missing_crds.sh'
      volumes:
        - name: scripts
          configMap:
            name: kuma-install-missing-crds-scripts
            defaultMode: 0755
        - name: missing-crds
          emptyDir: {}
