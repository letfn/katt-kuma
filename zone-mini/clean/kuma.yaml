---
# Source: kuma/templates/cp-rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kuma-control-plane
  namespace: kuma-system
  labels:
    helm.sh/chart: kuma-0.7.0
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: kuma
    app.kubernetes.io/version: "1.3.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: kuma/templates/ingress-rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kuma-ingress
  namespace: kuma-system
  labels:
    helm.sh/chart: kuma-0.7.0
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: kuma
    app.kubernetes.io/version: "1.3.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: kuma/templates/cp-webhooks-and-secrets.yaml
apiVersion: v1
kind: Secret
type: kubernetes.io/tls
metadata:
  name: kuma-tls-cert
  namespace: kuma-system
  labels:
    helm.sh/chart: kuma-0.7.0
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: kuma
    app.kubernetes.io/version: "1.3.0"
    app.kubernetes.io/managed-by: Helm
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURhekNDQWxPZ0F3SUJBZ0lSQUxLVGlaSktUYXdhMUh2eUpOODR1aWN3RFFZSktvWklodmNOQVFFTEJRQXcKRWpFUU1BNEdBMVVFQXhNSGEzVnRZUzFqWVRBZUZ3MHlNVEE1TWpRd09EQTRNekJhRncwek1UQTVNakl3T0RBNApNekJhTUIweEd6QVpCZ05WQkFNVEVtdDFiV0V0WTI5dWRISnZiQzF3YkdGdVpUQ0NBU0l3RFFZSktvWklodmNOCkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFPZEhUV3NpVGEvUGduVXhQczhmcWhGU3hxMmxYNHlpeXNaR0F2cXkKTnJIVzkySEw1Nld0Y05uZmJBYTR1ank3RFc3ekM0cGp1YmsrMzZWTkUxazhuaEFTVEROTkI3R0MxOXJJNHVPNwpmOFJHc3V1S1N4THpkbS9SS3p2UWluYy9XOEliMGdoL3hsSXhva0Z3T1ZCMlEvYzRad0JLNFhaWDB3TldTTFNJClFWZTlWRUtpYmgyNnFGK1RMb1ZqbVlwSjNLVUZzZlRFUEd5WnRmUDJFalNPbERsQW9oU1dTdVhhVFVQUkNHNFQKYmwvV29LYmg0dkIrbkVZR3NHUkdDdUNzM3o1MUhmOWh0SHYzQnpVSjVnaTU2eTlsYXd1WkJQbDkvSnpQR2ZJTApkaGoxdzhVdnQvdlNOQjJRdnR6WWFFMkdpdWRpZk9KL2c1eitZWTBSdDJHOUxHVUNBd0VBQWFPQnNEQ0JyVEFPCkJnTlZIUThCQWY4RUJBTUNCYUF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01Bd0cKQTFVZEV3RUIvd1FDTUFBd0h3WURWUjBqQkJnd0ZvQVVIV0svT05yeW9aQkFvU0xRVFhnSnhzdUhDd2t3VFFZRApWUjBSQkVZd1JJSWVhM1Z0WVMxamIyNTBjbTlzTFhCc1lXNWxMbXQxYldFdGMzbHpkR1Z0Z2lKcmRXMWhMV052CmJuUnliMnd0Y0d4aGJtVXVhM1Z0WVMxemVYTjBaVzB1YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQ3kKcDBtRVVudDF2TUZlZmR1NkttYURBaDdkSGZML2VkalBoN3B6QnNzRXFTRENlcUNpZ0dEa01ad2Q1MnBOQ1lycAozYmwyMnJUOWdpcFl6c05UdE5sTXcwTkN3SWN1b3JSOEdPaXhWa2U0M0dSNHR6S2pBcTVNUm1rTWo3OTVrR0hJCmY2NXpwa3E5NlJFOElrbFl0Z3BIa2xVV1ovWmw1akhlT09tNXhiSDIwMk1Vb3BpUUxFZktiK2ZoOUZzOS9VbDAKeDVPZmFZOUJMTmwyREJVZHl2QkVmbk9WM0s1MVEzVjA2UGpXUFhTaHovS1hWTzN0V1l0TDdyTDVFUklBNTAwSAoxODg5ZlNZdlNQNEFzM2VBME0yMVRSVXF5c213K0d0VlJuOXlBcGxzUmlWMzVsODZJT2tKSW9PeDZhenNwTEZ2Cm9LbjA3WlEzcy83MXk0ck4wcmw5Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBNTBkTmF5Sk5yOCtDZFRFK3p4K3FFVkxHcmFWZmpLTEt4a1lDK3JJMnNkYjNZY3ZuCnBhMXcyZDlzQnJpNlBMc05idk1MaW1PNXVUN2ZwVTBUV1R5ZUVCSk1NMDBIc1lMWDJzamk0N3QveEVheTY0cEwKRXZOMmI5RXJPOUNLZHo5YndodlNDSC9HVWpHaVFYQTVVSFpEOXpobkFFcmhkbGZUQTFaSXRJaEJWNzFVUXFKdQpIYnFvWDVNdWhXT1ppa25jcFFXeDlNUThiSm0xOC9ZU05JNlVPVUNpRkpaSzVkcE5ROUVJYmhOdVg5YWdwdUhpCjhINmNSZ2F3WkVZSzRLemZQblVkLzJHMGUvY0hOUW5tQ0xuckwyVnJDNWtFK1gzOG5NOFo4Z3QyR1BYRHhTKzMKKzlJMEhaQyszTmhvVFlhSzUySjg0bitEblA1aGpSRzNZYjBzWlFJREFRQUJBb0lCQVFEYkgrNVUvQnBZNGFXNwovVjJDQm9FdWlwdmMrQnR3ZHVqaU5JRXNIMSs4M1d4alJ6c0IrVE03NmZoQzRoRHA2MXZON0E3YUhxUmZ4QmRICldhQmtZdzlyTUxycnZDYjI0MzQ2Tnl6cEVjUDdKZlR0UDRqanVySlRQUDNXWFQ1anZ5N2oyVklGWlhKMGU3dzgKZmVSL3ZKMm1oTlRxTFFnekJRRFRYNVBoSUZ1d2tNODVNSy9Icm12MjBCN1Uya1ErQVN6U2xzdEFrcGowVDZ5UwoybDljanZtL0NVL0x3N0RXZUZaeS9wMUx1UFFsZDhtaUlYbzk4WUxrdnl6dG9NN0FUZWF0QVB2cHV1b0JqWk14Cm9NclU4Sm5kaE1wek1YZVRaZVIwUGRiZVE0aU1UVVNiNUZDRzFySjB5VG82bDQ0Rng4ZmNBN3NESnZtSUIybGMKd0I4VE9rRGhBb0dCQVBjMkkwa1QxVzR0YXRlMFQwU2pmbm5WeGIrTzliSldFRlJibEpWbFZ6ZHNkYkFERUJ6QgpqbUU3aS9keXFJN3lVd1oyWXEzQWxmNXhLV1JsUi9GWE1lS2JXd0cyUXYyKzBtc2VPUmlzZkZQQ090ZjF3OE9VCkhCWFRsS3dJb21TamR0eUwrVTVKR2hKZDQzaExNeU9yRkpRNUVFcTFHeUpaREZWUGZDbWdUcTFkQW9HQkFPK0EKS003cExQaHdqV3FVN2tnUDF2OGk5akNVd2liMmVIMkt0cnNNV1RTbzdZaG9aUWpBUWxINkFqTm5BWnZYRjV5MAphQzhxZ2owWGlPUWhSV0haOEhGWTJ1TVB5ZEpENGk3MTYyTjNVRVRSQWJGSkE3QWJmOEtCSW9sMzdGcFNudzIxCnFUbG5CdWZuTjEzRHl1eDFNNnhINXltaW9CYWM3TTlvUXcxWkdnS3BBb0dBVXBFNWJkSDdDaWFQTmVaYVIyR1gKLzVkZnllQTB2ZEN5K1ludzhZajhmVjF6WFV0WW1WSW9mTjlIbTJrblZUOG9iZE1pbUVmbmtTazRtdmljODhXYwp1c1FLdkdLa3MxMkZxQk5iSEp1WGx0NGJpei9obDdRalFVTCt1QXJXT21qQ2JWMHU4bS9HRG5aZllERTFybWNZCm8zei9yUVFhUVBtZS9ldGpXLy9YNTEwQ2dZQUhxT0dsUEcvandqWERvdCs4RGtXaUEwdzhZWVdVR1czaEZmNmkKSE5MOWpDbU1vMG9YN1k0eGNQMkJCMXBWMFpzL3Q4VmRQTTdOaFdNcmFLVC9iQ2owZHhNSkVBZzBZVmRxaVJMdQpLM0sxd0xsOUlnaXNLVFQ4MDRSM1FRNmVGT1poV2QzL3AvdmdqdFNHZXl5U1EyMVRwVGtQYTlRUzVSSHQwRGZVCnhYUy9nUUtCZ0ZxemQwRjArWm5hdk1BeW9GaVJlL3RkNUZkdGhDQ1JHdkxncGhnR3YyaHp5a1BXbmduRU9tWG8KU1NlVjc3dW1ScXB2T0QrZXdieTV2MEQwS0xReXA1eGswS0tPaXhsaitWNjZ0OGxqVTVnYzZwMFEyWEZTWS9NcwpORlFLakYwSUpuc1ZnS2ZnbXNzK254aXdDeUV3Y1VDRGJ3Y1VaYWdXQ1FRUzZVM1ZhNFpNCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUREekNDQWZlZ0F3SUJBZ0lRY0dVVXh1bk5jeEVqRzBLTGNSVWZTVEFOQmdrcWhraUc5dzBCQVFzRkFEQVMKTVJBd0RnWURWUVFERXdkcmRXMWhMV05oTUI0WERUSXhNRGt5TkRBNE1EZ3pNRm9YRFRNeE1Ea3lNakE0TURnegpNRm93RWpFUU1BNEdBMVVFQXhNSGEzVnRZUzFqWVRDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDCkFRb0NnZ0VCQUw1eURrTnJlRzQzcFRuTWFhTm9QTjNCU2pIVXA5djdTYlUxTTNldFBoMDVwbk5BbnBScVRweGgKcWxiRmthR1IzZVQrWjBocGc5T1RIS0ZULzJTcEhBUHR3bm8rVHhHaEdQUkJsbFloanhQcEFINzc1V1c1YlVWZQprMThEelVTa3FlQzNKMm1QSmwxWVdCdnhCeHFvZjNkTk5jajJqU1RERC9ZYTZYc2lUWW5iUVlJczFCRmg3WklKCmJ1c1ZsSy9HaVZaQnFmeHkwc3E4b2hmMHZkYkdjSDR6SmpLTzhSN0g1NkluQTVyOHFHWDNXU280NlkvSGw2a0wKQ28wNzhVbHVhTVROS0dySmpYTkN4akl3cTNBb1J2aE91R2M1YmFOelZ3N21OZmx4NEhXYTh2SDJteDJiZVZ2WQpLK2xrVmh6bGIrUG1mb3l0UnUzdjRQcnRFYUhYcE04Q0F3RUFBYU5oTUY4d0RnWURWUjBQQVFIL0JBUURBZ0trCk1CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFQQmdOVkhSTUJBZjhFQlRBREFRSC8KTUIwR0ExVWREZ1FXQkJRZFlyODQydktoa0VDaEl0Qk5lQW5HeTRjTENUQU5CZ2txaGtpRzl3MEJBUXNGQUFPQwpBUUVBaFdhMUI5cTdrVnZEb3VkSHA4bjNzZmpsU2Vkc3FNOXFyT0JZc04xc21WNDl5bytoekVJQjJKZjRzZFdzCnlyb0JsT3RwLzJkVFdrOEY2ajRRa0Y0RXZRVXpaY2VzbUxUNWNwczJ2SEZ6aWJaUzdZRWRCbWFyY1pGK1A0UDgKWlJUa2lYaUdKR3krdGduVWp1YzdENzlWUmZST2ZvaHRuS2RlZlRTeWYydkpGTVNrTHdublFJRHhGakhaN045eQpvR1ZLalBKMC80dzF1anhYTjJYQjNMc1FET3F1SWlHVWJOVE81aFFRTFRucXh3bDVVQVhsN3RxWlJRdm9hY1NzClA5YlBPRWN2a2EwQUY3blZYMGZ3TjRsOHF5RVRkaEJLcTk5NnR5NkZNN1lKNGYzbFdhcXgzNTNJMVFqS24rYUcKTnYza1h2dXJZUUQzRW10WWlkeVdRYXBzcWc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
---
# Source: kuma/templates/cp-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kuma-control-plane-config
  namespace: kuma-system
  labels:
    helm.sh/chart: kuma-0.7.0
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: kuma
    app.kubernetes.io/version: "1.3.0"
    app.kubernetes.io/managed-by: Helm
data:
  config.yaml: |
    # use this file to override default configuration of `kuma-cp`
    #
    # see conf/kuma-cp.conf.yml for available settings
---
# Source: kuma/templates/cp-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kuma-control-plane
  labels:
    helm.sh/chart: kuma-0.7.0
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: kuma
    app.kubernetes.io/version: "1.3.0"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
      - pods
      - configmaps
      - nodes
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - kuma.io
    resources:
      - dataplanes
      - dataplaneinsights
      - meshes
      - zones
      - zoneinsights
      - zoneingresses
      - zoneingressinsights
      - meshinsights
      - serviceinsights
      - proxytemplates
      - ratelimits
      - trafficpermissions
      - trafficroutes
      - timeouts
      - retries
      - circuitbreakers
      - virtualoutbounds
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - kuma.io
    resources:
      - externalservices
      - faultinjections
      - healthchecks
      - trafficlogs
      - traffictraces
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - ""
    resources:
      - pods/finalizers
    verbs:
      - "*"
  - apiGroups:
      - kuma.io
    resources:
      - meshes/finalizers
    verbs:
      - "*"
  - apiGroups:
      - kuma.io
    resources:
      - dataplanes/finalizers
    verbs:
      - "*"
  # validate k8s token before issuing mTLS cert
  - apiGroups:
      - authentication.k8s.io
    resources:
      - tokenreviews
    verbs:
      - create
---
# Source: kuma/templates/cp-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kuma-control-plane
  labels:
    helm.sh/chart: kuma-0.7.0
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: kuma
    app.kubernetes.io/version: "1.3.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kuma-control-plane
subjects:
  - kind: ServiceAccount
    name: kuma-control-plane
    namespace: kuma-system
---
# Source: kuma/templates/cp-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: kuma-control-plane
  namespace: kuma-system
  labels:
    helm.sh/chart: kuma-0.7.0
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: kuma
    app.kubernetes.io/version: "1.3.0"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
---
# Source: kuma/templates/cp-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kuma-control-plane
  namespace: kuma-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kuma-control-plane
subjects:
  - kind: ServiceAccount
    name: kuma-control-plane
    namespace: kuma-system
---
# Source: kuma/templates/cp-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: kuma-control-plane
  namespace: kuma-system
  labels:
    helm.sh/chart: kuma-0.7.0
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: kuma
    app.kubernetes.io/version: "1.3.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "5680"
spec:
  type: ClusterIP
  ports:
    - port: 5681
      name: http-api-server
    - port: 5682
      name: https-api-server
    - port: 443
      name: https-admission-server
      targetPort: 5443
    - port: 5676
      name: mads-server
    - port: 5678
      name: dp-server
    - port: 5653
      name: dns-server
      protocol: UDP
  selector:
    app: kuma-control-plane
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: kuma
---
# Source: kuma/templates/ingress-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: kuma-ingress
  namespace: kuma-system
  labels:
    helm.sh/chart: kuma-0.7.0
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: kuma
    app.kubernetes.io/version: "1.3.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  type: LoadBalancer
  ports:
    - port: 10001
      protocol: TCP
      targetPort: 10001
  selector:
    app: kuma-ingress
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: kuma
---
# Source: kuma/templates/cp-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kuma-control-plane
  namespace: kuma-system
  labels:
    helm.sh/chart: kuma-0.7.0
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: kuma
    app.kubernetes.io/version: "1.3.0"
    app.kubernetes.io/managed-by: Helm
    app: kuma-control-plane
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: kuma
      app.kubernetes.io/instance: kuma
      app: kuma-control-plane
  template:
    metadata:
      annotations:
        checksum/config: 6df33ec160599ac1a5e9fda109e2ba0d02c865f926ac14ecf92895e96b70a228
        checksum/tls-secrets: 23bb183b960766eef53129cf134e85e259c24802dbdd5a827b8f25710140a56d
      labels:
        app.kubernetes.io/name: kuma
        app.kubernetes.io/instance: kuma
        app: kuma-control-plane
    spec:
      serviceAccountName: kuma-control-plane
      nodeSelector:
        
        kubernetes.io/arch: amd64
        kubernetes.io/os: linux
      containers:
        - name: control-plane
          image: "docker.io/kumahq/kuma-cp:1.3.0"
          imagePullPolicy: IfNotPresent
          env:
            - name: KUMA_API_SERVER_READ_ONLY
              value: "true"
            - name: KUMA_DEFAULTS_SKIP_MESH_CREATION
              value: "false"
            - name: KUMA_DP_SERVER_HDS_ENABLED
              value: "false"
            - name: KUMA_ENVIRONMENT
              value: "kubernetes"
            - name: KUMA_GENERAL_TLS_CERT_FILE
              value: "/var/run/secrets/kuma.io/tls-cert/tls.crt"
            - name: KUMA_GENERAL_TLS_KEY_FILE
              value: "/var/run/secrets/kuma.io/tls-cert/tls.key"
            - name: KUMA_INJECTOR_INIT_CONTAINER_IMAGE
              value: "docker.io/kumahq/kuma-init:1.3.0"
            - name: KUMA_MODE
              value: "zone"
            - name: KUMA_MULTIZONE_ZONE_GLOBAL_ADDRESS
              value: "grpcs://100.101.28.35:5685"
            - name: KUMA_MULTIZONE_ZONE_NAME
              value: "mini"
            - name: KUMA_RUNTIME_KUBERNETES_ADMISSION_SERVER_CERT_DIR
              value: "/var/run/secrets/kuma.io/tls-cert"
            - name: KUMA_RUNTIME_KUBERNETES_ADMISSION_SERVER_PORT
              value: "5443"
            - name: KUMA_RUNTIME_KUBERNETES_CONTROL_PLANE_SERVICE_NAME
              value: "kuma-control-plane"
            - name: KUMA_RUNTIME_KUBERNETES_INJECTOR_CA_CERT_FILE
              value: "/var/run/secrets/kuma.io/tls-cert/ca.crt"
            - name: KUMA_RUNTIME_KUBERNETES_INJECTOR_CNI_ENABLED
              value: "false"
            - name: KUMA_RUNTIME_KUBERNETES_INJECTOR_SIDECAR_CONTAINER_IMAGE
              value: "docker.io/kumahq/kuma-dp:1.3.0"
            - name: KUMA_STORE_KUBERNETES_SYSTEM_NAMESPACE
              value: "kuma-system"
            - name: KUMA_STORE_TYPE
              value: "kubernetes"
          args:
            - run
            - --log-level=info
            - --config-file=/etc/kuma.io/kuma-control-plane/config.yaml
          ports:
            - containerPort: 5681
            - containerPort: 5682
            - containerPort: 5443
            - containerPort: 5678
            - containerPort: 5653
              protocol: UDP
          livenessProbe:
            httpGet:
              path: /healthy
              port: 5680
          readinessProbe:
            httpGet:
              path: /ready
              port: 5680
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
          volumeMounts:
            - name: general-tls-cert
              mountPath: /var/run/secrets/kuma.io/tls-cert
              readOnly: true
            - name: kuma-control-plane-config
              mountPath: /etc/kuma.io/kuma-control-plane
              readOnly: true
      volumes:
        - name: general-tls-cert
          secret:
            secretName: kuma-tls-cert
        - name: kuma-control-plane-config
          configMap:
            name: kuma-control-plane-config
---
# Source: kuma/templates/ingress-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kuma-ingress
  namespace: kuma-system
  labels:
    helm.sh/chart: kuma-0.7.0
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: kuma
    app.kubernetes.io/version: "1.3.0"
    app.kubernetes.io/managed-by: Helm
    app: kuma-ingress
spec:
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: kuma
      app.kubernetes.io/instance: kuma
      app: kuma-ingress
  template:
    metadata:
      annotations:
        kuma.io/ingress: enabled
      labels:
        app.kubernetes.io/name: kuma
        app.kubernetes.io/instance: kuma
        app: kuma-ingress
    spec:
      serviceAccountName: kuma-ingress
      nodeSelector:
      
        kubernetes.io/arch: amd64
        kubernetes.io/os: linux
      containers:
        - name: ingress
          image: "docker.io/kumahq/kuma-dp:1.3.0"
          imagePullPolicy: IfNotPresent
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: KUMA_CONTROL_PLANE_URL
              value: "https://kuma-control-plane.kuma-system:5678"
            - name: KUMA_CONTROL_PLANE_CA_CERT_FILE
              value: /var/run/secrets/kuma.io/tls-cert/ca.crt
            - name: KUMA_DATAPLANE_NAME
              value: $(POD_NAME).$(POD_NAMESPACE)
            - name: KUMA_DATAPLANE_ADMIN_PORT
              value: "9901"
            - name: KUMA_DATAPLANE_DRAIN_TIME
              value: 30s
            - name: KUMA_DATAPLANE_RUNTIME_TOKEN_PATH
              value: /var/run/secrets/kubernetes.io/serviceaccount/token
            - name: KUMA_DATAPLANE_PROXY_TYPE
              value: "ingress"
          args:
            - run
            - --log-level=info
          ports:
            - containerPort: 10001
          livenessProbe:
            exec:
              command:
                - wget
                - -qO-
                - http://127.0.0.1:9901
            failureThreshold: 12
            initialDelaySeconds: 60
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
          readinessProbe:
            exec:
              command:
                - wget
                - -qO-
                - http://127.0.0.1:9901
            failureThreshold: 12
            initialDelaySeconds: 1
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
          resources:
            requests:
              cpu: 50m
              memory: 64Mi
            limits:
              cpu: 1000m
              memory: 512Mi
          volumeMounts:
            - name: kuma-tls-cert
              mountPath: /var/run/secrets/kuma.io/tls-cert
              readOnly: true
      volumes:
        - name: kuma-tls-cert
          secret:
            secretName: kuma-tls-cert
---
# Source: kuma/templates/cp-webhooks-and-secrets.yaml
apiVersion: admissionregistration.k8s.io/v1

kind: MutatingWebhookConfiguration
metadata:
  name: kuma-admission-mutating-webhook-configuration
  namespace: kuma-system
  labels:
  
    helm.sh/chart: kuma-0.7.0
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: kuma
    app.kubernetes.io/version: "1.3.0"
    app.kubernetes.io/managed-by: Helm
webhooks:
  - name: mesh.defaulter.kuma-admission.kuma.io
    admissionReviewVersions: ["v1beta1"]
    failurePolicy: Fail
    clientConfig:
      caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUREekNDQWZlZ0F3SUJBZ0lRY0dVVXh1bk5jeEVqRzBLTGNSVWZTVEFOQmdrcWhraUc5dzBCQVFzRkFEQVMKTVJBd0RnWURWUVFERXdkcmRXMWhMV05oTUI0WERUSXhNRGt5TkRBNE1EZ3pNRm9YRFRNeE1Ea3lNakE0TURnegpNRm93RWpFUU1BNEdBMVVFQXhNSGEzVnRZUzFqWVRDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDCkFRb0NnZ0VCQUw1eURrTnJlRzQzcFRuTWFhTm9QTjNCU2pIVXA5djdTYlUxTTNldFBoMDVwbk5BbnBScVRweGgKcWxiRmthR1IzZVQrWjBocGc5T1RIS0ZULzJTcEhBUHR3bm8rVHhHaEdQUkJsbFloanhQcEFINzc1V1c1YlVWZQprMThEelVTa3FlQzNKMm1QSmwxWVdCdnhCeHFvZjNkTk5jajJqU1RERC9ZYTZYc2lUWW5iUVlJczFCRmg3WklKCmJ1c1ZsSy9HaVZaQnFmeHkwc3E4b2hmMHZkYkdjSDR6SmpLTzhSN0g1NkluQTVyOHFHWDNXU280NlkvSGw2a0wKQ28wNzhVbHVhTVROS0dySmpYTkN4akl3cTNBb1J2aE91R2M1YmFOelZ3N21OZmx4NEhXYTh2SDJteDJiZVZ2WQpLK2xrVmh6bGIrUG1mb3l0UnUzdjRQcnRFYUhYcE04Q0F3RUFBYU5oTUY4d0RnWURWUjBQQVFIL0JBUURBZ0trCk1CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFQQmdOVkhSTUJBZjhFQlRBREFRSC8KTUIwR0ExVWREZ1FXQkJRZFlyODQydktoa0VDaEl0Qk5lQW5HeTRjTENUQU5CZ2txaGtpRzl3MEJBUXNGQUFPQwpBUUVBaFdhMUI5cTdrVnZEb3VkSHA4bjNzZmpsU2Vkc3FNOXFyT0JZc04xc21WNDl5bytoekVJQjJKZjRzZFdzCnlyb0JsT3RwLzJkVFdrOEY2ajRRa0Y0RXZRVXpaY2VzbUxUNWNwczJ2SEZ6aWJaUzdZRWRCbWFyY1pGK1A0UDgKWlJUa2lYaUdKR3krdGduVWp1YzdENzlWUmZST2ZvaHRuS2RlZlRTeWYydkpGTVNrTHdublFJRHhGakhaN045eQpvR1ZLalBKMC80dzF1anhYTjJYQjNMc1FET3F1SWlHVWJOVE81aFFRTFRucXh3bDVVQVhsN3RxWlJRdm9hY1NzClA5YlBPRWN2a2EwQUY3blZYMGZ3TjRsOHF5RVRkaEJLcTk5NnR5NkZNN1lKNGYzbFdhcXgzNTNJMVFqS24rYUcKTnYza1h2dXJZUUQzRW10WWlkeVdRYXBzcWc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
      service:
        namespace: kuma-system
        name: kuma-control-plane
        path: /default-kuma-io-v1alpha1-mesh
    rules:
      - apiGroups:
          - kuma.io
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
        resources:
          - meshes
    sideEffects: None
  - name: owner-reference.kuma-admission.kuma.io
    admissionReviewVersions: ["v1beta1"]
    failurePolicy: Fail
    clientConfig:
      caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUREekNDQWZlZ0F3SUJBZ0lRY0dVVXh1bk5jeEVqRzBLTGNSVWZTVEFOQmdrcWhraUc5dzBCQVFzRkFEQVMKTVJBd0RnWURWUVFERXdkcmRXMWhMV05oTUI0WERUSXhNRGt5TkRBNE1EZ3pNRm9YRFRNeE1Ea3lNakE0TURnegpNRm93RWpFUU1BNEdBMVVFQXhNSGEzVnRZUzFqWVRDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDCkFRb0NnZ0VCQUw1eURrTnJlRzQzcFRuTWFhTm9QTjNCU2pIVXA5djdTYlUxTTNldFBoMDVwbk5BbnBScVRweGgKcWxiRmthR1IzZVQrWjBocGc5T1RIS0ZULzJTcEhBUHR3bm8rVHhHaEdQUkJsbFloanhQcEFINzc1V1c1YlVWZQprMThEelVTa3FlQzNKMm1QSmwxWVdCdnhCeHFvZjNkTk5jajJqU1RERC9ZYTZYc2lUWW5iUVlJczFCRmg3WklKCmJ1c1ZsSy9HaVZaQnFmeHkwc3E4b2hmMHZkYkdjSDR6SmpLTzhSN0g1NkluQTVyOHFHWDNXU280NlkvSGw2a0wKQ28wNzhVbHVhTVROS0dySmpYTkN4akl3cTNBb1J2aE91R2M1YmFOelZ3N21OZmx4NEhXYTh2SDJteDJiZVZ2WQpLK2xrVmh6bGIrUG1mb3l0UnUzdjRQcnRFYUhYcE04Q0F3RUFBYU5oTUY4d0RnWURWUjBQQVFIL0JBUURBZ0trCk1CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFQQmdOVkhSTUJBZjhFQlRBREFRSC8KTUIwR0ExVWREZ1FXQkJRZFlyODQydktoa0VDaEl0Qk5lQW5HeTRjTENUQU5CZ2txaGtpRzl3MEJBUXNGQUFPQwpBUUVBaFdhMUI5cTdrVnZEb3VkSHA4bjNzZmpsU2Vkc3FNOXFyT0JZc04xc21WNDl5bytoekVJQjJKZjRzZFdzCnlyb0JsT3RwLzJkVFdrOEY2ajRRa0Y0RXZRVXpaY2VzbUxUNWNwczJ2SEZ6aWJaUzdZRWRCbWFyY1pGK1A0UDgKWlJUa2lYaUdKR3krdGduVWp1YzdENzlWUmZST2ZvaHRuS2RlZlRTeWYydkpGTVNrTHdublFJRHhGakhaN045eQpvR1ZLalBKMC80dzF1anhYTjJYQjNMc1FET3F1SWlHVWJOVE81aFFRTFRucXh3bDVVQVhsN3RxWlJRdm9hY1NzClA5YlBPRWN2a2EwQUY3blZYMGZ3TjRsOHF5RVRkaEJLcTk5NnR5NkZNN1lKNGYzbFdhcXgzNTNJMVFqS24rYUcKTnYza1h2dXJZUUQzRW10WWlkeVdRYXBzcWc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
      service:
        namespace: kuma-system
        name: kuma-control-plane
        path: /owner-reference-kuma-io-v1alpha1
    rules:
      - apiGroups:
          - kuma.io
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
        resources:
          - circuitbreakers
          - externalservices
          - faultinjections
          - healthchecks
          - retries
          - proxytemplates
          - ratelimits
          - trafficlogs
          - trafficpermissions
          - trafficroutes
          - traffictraces
          - virtualoutbounds
    
      
    sideEffects: None
  - name: kuma-injector.kuma.io
    admissionReviewVersions: ["v1beta1"]
    failurePolicy: Ignore
    clientConfig:
      caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUREekNDQWZlZ0F3SUJBZ0lRY0dVVXh1bk5jeEVqRzBLTGNSVWZTVEFOQmdrcWhraUc5dzBCQVFzRkFEQVMKTVJBd0RnWURWUVFERXdkcmRXMWhMV05oTUI0WERUSXhNRGt5TkRBNE1EZ3pNRm9YRFRNeE1Ea3lNakE0TURnegpNRm93RWpFUU1BNEdBMVVFQXhNSGEzVnRZUzFqWVRDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDCkFRb0NnZ0VCQUw1eURrTnJlRzQzcFRuTWFhTm9QTjNCU2pIVXA5djdTYlUxTTNldFBoMDVwbk5BbnBScVRweGgKcWxiRmthR1IzZVQrWjBocGc5T1RIS0ZULzJTcEhBUHR3bm8rVHhHaEdQUkJsbFloanhQcEFINzc1V1c1YlVWZQprMThEelVTa3FlQzNKMm1QSmwxWVdCdnhCeHFvZjNkTk5jajJqU1RERC9ZYTZYc2lUWW5iUVlJczFCRmg3WklKCmJ1c1ZsSy9HaVZaQnFmeHkwc3E4b2hmMHZkYkdjSDR6SmpLTzhSN0g1NkluQTVyOHFHWDNXU280NlkvSGw2a0wKQ28wNzhVbHVhTVROS0dySmpYTkN4akl3cTNBb1J2aE91R2M1YmFOelZ3N21OZmx4NEhXYTh2SDJteDJiZVZ2WQpLK2xrVmh6bGIrUG1mb3l0UnUzdjRQcnRFYUhYcE04Q0F3RUFBYU5oTUY4d0RnWURWUjBQQVFIL0JBUURBZ0trCk1CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFQQmdOVkhSTUJBZjhFQlRBREFRSC8KTUIwR0ExVWREZ1FXQkJRZFlyODQydktoa0VDaEl0Qk5lQW5HeTRjTENUQU5CZ2txaGtpRzl3MEJBUXNGQUFPQwpBUUVBaFdhMUI5cTdrVnZEb3VkSHA4bjNzZmpsU2Vkc3FNOXFyT0JZc04xc21WNDl5bytoekVJQjJKZjRzZFdzCnlyb0JsT3RwLzJkVFdrOEY2ajRRa0Y0RXZRVXpaY2VzbUxUNWNwczJ2SEZ6aWJaUzdZRWRCbWFyY1pGK1A0UDgKWlJUa2lYaUdKR3krdGduVWp1YzdENzlWUmZST2ZvaHRuS2RlZlRTeWYydkpGTVNrTHdublFJRHhGakhaN045eQpvR1ZLalBKMC80dzF1anhYTjJYQjNMc1FET3F1SWlHVWJOVE81aFFRTFRucXh3bDVVQVhsN3RxWlJRdm9hY1NzClA5YlBPRWN2a2EwQUY3blZYMGZ3TjRsOHF5RVRkaEJLcTk5NnR5NkZNN1lKNGYzbFdhcXgzNTNJMVFqS24rYUcKTnYza1h2dXJZUUQzRW10WWlkeVdRYXBzcWc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
      service:
        namespace: kuma-system
        name: kuma-control-plane
        path: /inject-sidecar
    rules:
      - apiGroups:
          - ""
        apiVersions:
          - v1
        operations:
          - CREATE
        resources:
          - pods
    sideEffects: None
---
# Source: kuma/templates/cp-webhooks-and-secrets.yaml
apiVersion: admissionregistration.k8s.io/v1

kind: ValidatingWebhookConfiguration
metadata:
  name: kuma-validating-webhook-configuration
  namespace: kuma-system
  labels:
  
    helm.sh/chart: kuma-0.7.0
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: kuma
    app.kubernetes.io/version: "1.3.0"
    app.kubernetes.io/managed-by: Helm
webhooks:
  - name: validator.kuma-admission.kuma.io
    admissionReviewVersions: ["v1beta1"]
    failurePolicy: Fail
    clientConfig:
      caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUREekNDQWZlZ0F3SUJBZ0lRY0dVVXh1bk5jeEVqRzBLTGNSVWZTVEFOQmdrcWhraUc5dzBCQVFzRkFEQVMKTVJBd0RnWURWUVFERXdkcmRXMWhMV05oTUI0WERUSXhNRGt5TkRBNE1EZ3pNRm9YRFRNeE1Ea3lNakE0TURnegpNRm93RWpFUU1BNEdBMVVFQXhNSGEzVnRZUzFqWVRDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDCkFRb0NnZ0VCQUw1eURrTnJlRzQzcFRuTWFhTm9QTjNCU2pIVXA5djdTYlUxTTNldFBoMDVwbk5BbnBScVRweGgKcWxiRmthR1IzZVQrWjBocGc5T1RIS0ZULzJTcEhBUHR3bm8rVHhHaEdQUkJsbFloanhQcEFINzc1V1c1YlVWZQprMThEelVTa3FlQzNKMm1QSmwxWVdCdnhCeHFvZjNkTk5jajJqU1RERC9ZYTZYc2lUWW5iUVlJczFCRmg3WklKCmJ1c1ZsSy9HaVZaQnFmeHkwc3E4b2hmMHZkYkdjSDR6SmpLTzhSN0g1NkluQTVyOHFHWDNXU280NlkvSGw2a0wKQ28wNzhVbHVhTVROS0dySmpYTkN4akl3cTNBb1J2aE91R2M1YmFOelZ3N21OZmx4NEhXYTh2SDJteDJiZVZ2WQpLK2xrVmh6bGIrUG1mb3l0UnUzdjRQcnRFYUhYcE04Q0F3RUFBYU5oTUY4d0RnWURWUjBQQVFIL0JBUURBZ0trCk1CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFQQmdOVkhSTUJBZjhFQlRBREFRSC8KTUIwR0ExVWREZ1FXQkJRZFlyODQydktoa0VDaEl0Qk5lQW5HeTRjTENUQU5CZ2txaGtpRzl3MEJBUXNGQUFPQwpBUUVBaFdhMUI5cTdrVnZEb3VkSHA4bjNzZmpsU2Vkc3FNOXFyT0JZc04xc21WNDl5bytoekVJQjJKZjRzZFdzCnlyb0JsT3RwLzJkVFdrOEY2ajRRa0Y0RXZRVXpaY2VzbUxUNWNwczJ2SEZ6aWJaUzdZRWRCbWFyY1pGK1A0UDgKWlJUa2lYaUdKR3krdGduVWp1YzdENzlWUmZST2ZvaHRuS2RlZlRTeWYydkpGTVNrTHdublFJRHhGakhaN045eQpvR1ZLalBKMC80dzF1anhYTjJYQjNMc1FET3F1SWlHVWJOVE81aFFRTFRucXh3bDVVQVhsN3RxWlJRdm9hY1NzClA5YlBPRWN2a2EwQUY3blZYMGZ3TjRsOHF5RVRkaEJLcTk5NnR5NkZNN1lKNGYzbFdhcXgzNTNJMVFqS24rYUcKTnYza1h2dXJZUUQzRW10WWlkeVdRYXBzcWc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
      service:
        namespace: kuma-system
        name: kuma-control-plane
        path: /validate-kuma-io-v1alpha1
    rules:
      - apiGroups:
          - kuma.io
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
          - DELETE
        resources:
          - circuitbreakers
          - dataplanes
          - externalservices
          - faultinjections
          - healthchecks
          - retries
          - meshes
          - proxytemplates
          - ratelimits
          - trafficlogs
          - trafficpermissions
          - trafficroutes
          - traffictraces
          - virtualoutbounds
          - zones
    
      
    sideEffects: None
  - name: service.validator.kuma-admission.kuma.io
    admissionReviewVersions: ["v1beta1"]
    failurePolicy: Ignore
    clientConfig:
      caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUREekNDQWZlZ0F3SUJBZ0lRY0dVVXh1bk5jeEVqRzBLTGNSVWZTVEFOQmdrcWhraUc5dzBCQVFzRkFEQVMKTVJBd0RnWURWUVFERXdkcmRXMWhMV05oTUI0WERUSXhNRGt5TkRBNE1EZ3pNRm9YRFRNeE1Ea3lNakE0TURnegpNRm93RWpFUU1BNEdBMVVFQXhNSGEzVnRZUzFqWVRDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDCkFRb0NnZ0VCQUw1eURrTnJlRzQzcFRuTWFhTm9QTjNCU2pIVXA5djdTYlUxTTNldFBoMDVwbk5BbnBScVRweGgKcWxiRmthR1IzZVQrWjBocGc5T1RIS0ZULzJTcEhBUHR3bm8rVHhHaEdQUkJsbFloanhQcEFINzc1V1c1YlVWZQprMThEelVTa3FlQzNKMm1QSmwxWVdCdnhCeHFvZjNkTk5jajJqU1RERC9ZYTZYc2lUWW5iUVlJczFCRmg3WklKCmJ1c1ZsSy9HaVZaQnFmeHkwc3E4b2hmMHZkYkdjSDR6SmpLTzhSN0g1NkluQTVyOHFHWDNXU280NlkvSGw2a0wKQ28wNzhVbHVhTVROS0dySmpYTkN4akl3cTNBb1J2aE91R2M1YmFOelZ3N21OZmx4NEhXYTh2SDJteDJiZVZ2WQpLK2xrVmh6bGIrUG1mb3l0UnUzdjRQcnRFYUhYcE04Q0F3RUFBYU5oTUY4d0RnWURWUjBQQVFIL0JBUURBZ0trCk1CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFQQmdOVkhSTUJBZjhFQlRBREFRSC8KTUIwR0ExVWREZ1FXQkJRZFlyODQydktoa0VDaEl0Qk5lQW5HeTRjTENUQU5CZ2txaGtpRzl3MEJBUXNGQUFPQwpBUUVBaFdhMUI5cTdrVnZEb3VkSHA4bjNzZmpsU2Vkc3FNOXFyT0JZc04xc21WNDl5bytoekVJQjJKZjRzZFdzCnlyb0JsT3RwLzJkVFdrOEY2ajRRa0Y0RXZRVXpaY2VzbUxUNWNwczJ2SEZ6aWJaUzdZRWRCbWFyY1pGK1A0UDgKWlJUa2lYaUdKR3krdGduVWp1YzdENzlWUmZST2ZvaHRuS2RlZlRTeWYydkpGTVNrTHdublFJRHhGakhaN045eQpvR1ZLalBKMC80dzF1anhYTjJYQjNMc1FET3F1SWlHVWJOVE81aFFRTFRucXh3bDVVQVhsN3RxWlJRdm9hY1NzClA5YlBPRWN2a2EwQUY3blZYMGZ3TjRsOHF5RVRkaEJLcTk5NnR5NkZNN1lKNGYzbFdhcXgzNTNJMVFqS24rYUcKTnYza1h2dXJZUUQzRW10WWlkeVdRYXBzcWc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
      service:
        namespace: kuma-system
        name: kuma-control-plane
        path: /validate-v1-service
    rules:
      - apiGroups:
          - ""
        apiVersions:
          - v1
        operations:
          - CREATE
          - UPDATE
        resources:
          - services
    sideEffects: None
  - name: secret.validator.kuma-admission.kuma.io
    admissionReviewVersions: ["v1beta1"]
    namespaceSelector:
      matchLabels:
        kuma.io/system-namespace: "true"
    failurePolicy: Ignore
    clientConfig:
      caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUREekNDQWZlZ0F3SUJBZ0lRY0dVVXh1bk5jeEVqRzBLTGNSVWZTVEFOQmdrcWhraUc5dzBCQVFzRkFEQVMKTVJBd0RnWURWUVFERXdkcmRXMWhMV05oTUI0WERUSXhNRGt5TkRBNE1EZ3pNRm9YRFRNeE1Ea3lNakE0TURnegpNRm93RWpFUU1BNEdBMVVFQXhNSGEzVnRZUzFqWVRDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDCkFRb0NnZ0VCQUw1eURrTnJlRzQzcFRuTWFhTm9QTjNCU2pIVXA5djdTYlUxTTNldFBoMDVwbk5BbnBScVRweGgKcWxiRmthR1IzZVQrWjBocGc5T1RIS0ZULzJTcEhBUHR3bm8rVHhHaEdQUkJsbFloanhQcEFINzc1V1c1YlVWZQprMThEelVTa3FlQzNKMm1QSmwxWVdCdnhCeHFvZjNkTk5jajJqU1RERC9ZYTZYc2lUWW5iUVlJczFCRmg3WklKCmJ1c1ZsSy9HaVZaQnFmeHkwc3E4b2hmMHZkYkdjSDR6SmpLTzhSN0g1NkluQTVyOHFHWDNXU280NlkvSGw2a0wKQ28wNzhVbHVhTVROS0dySmpYTkN4akl3cTNBb1J2aE91R2M1YmFOelZ3N21OZmx4NEhXYTh2SDJteDJiZVZ2WQpLK2xrVmh6bGIrUG1mb3l0UnUzdjRQcnRFYUhYcE04Q0F3RUFBYU5oTUY4d0RnWURWUjBQQVFIL0JBUURBZ0trCk1CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFQQmdOVkhSTUJBZjhFQlRBREFRSC8KTUIwR0ExVWREZ1FXQkJRZFlyODQydktoa0VDaEl0Qk5lQW5HeTRjTENUQU5CZ2txaGtpRzl3MEJBUXNGQUFPQwpBUUVBaFdhMUI5cTdrVnZEb3VkSHA4bjNzZmpsU2Vkc3FNOXFyT0JZc04xc21WNDl5bytoekVJQjJKZjRzZFdzCnlyb0JsT3RwLzJkVFdrOEY2ajRRa0Y0RXZRVXpaY2VzbUxUNWNwczJ2SEZ6aWJaUzdZRWRCbWFyY1pGK1A0UDgKWlJUa2lYaUdKR3krdGduVWp1YzdENzlWUmZST2ZvaHRuS2RlZlRTeWYydkpGTVNrTHdublFJRHhGakhaN045eQpvR1ZLalBKMC80dzF1anhYTjJYQjNMc1FET3F1SWlHVWJOVE81aFFRTFRucXh3bDVVQVhsN3RxWlJRdm9hY1NzClA5YlBPRWN2a2EwQUY3blZYMGZ3TjRsOHF5RVRkaEJLcTk5NnR5NkZNN1lKNGYzbFdhcXgzNTNJMVFqS24rYUcKTnYza1h2dXJZUUQzRW10WWlkeVdRYXBzcWc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
      service:
        namespace: kuma-system
        name: kuma-control-plane
        path: /validate-v1-secret
    rules:
      - apiGroups:
          - ""
        apiVersions:
          - v1
        operations:
          - CREATE
          - UPDATE
          - DELETE
        resources:
          - secrets
    sideEffects: None
---
# Source: kuma/templates/pre-delete-webhooks.yaml
# HELM first deletes RBAC of Kuma, then it tries to delete Secrets. We've got validating webhook on Secrets.
# But even that the policy of this webhook is Ignore, it fails because Kuma does not have permission to access Secrets anymore.
# Therefore we first need to delete webhook so we can delete the rest of the deployment
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kuma-pre-delete-job
  namespace: kuma-system
  annotations:
    "helm.sh/hook": "pre-delete"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
  labels:
    helm.sh/chart: kuma-0.7.0
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: kuma
    app.kubernetes.io/version: "1.3.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: kuma/templates/pre-install-patch-namespace-job.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kuma-patch-ns-job
  namespace: kuma-system
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
  labels:
    helm.sh/chart: kuma-0.7.0
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: kuma
    app.kubernetes.io/version: "1.3.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: kuma/templates/pre-upgrade-install-missing-crds-job.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kuma-install-missing-crds
  annotations:
    "helm.sh/hook": "pre-upgrade"
    "helm.sh/hook-weight": "-1"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
  labels:
    helm.sh/chart: kuma-0.7.0
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: kuma
    app.kubernetes.io/version: "1.3.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: kuma/templates/pre-upgrade-install-missing-crds-job.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kuma-install-missing-crds-scripts
  namespace: kuma-system
  annotations:
    "helm.sh/hook": "pre-upgrade"
    "helm.sh/hook-weight": "-1"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
  labels:
    helm.sh/chart: kuma-0.7.0
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: kuma
    app.kubernetes.io/version: "1.3.0"
    app.kubernetes.io/managed-by: Helm
data:
  install_missing_crds.sh: |
    #!/usr/bin/env sh

    if [ -s /kuma/missing/crds.yaml ]; then
      echo "/kuma/missing/crds.yaml found and is not empty, adding crds"
      kubectl create -f /kuma/missing/crds.yaml
    else
      echo "/kuma/missing/crds.yaml not found or empty, it looks like there is no missing crds"
    fi
  save_missing_crds.sh: |
    #!/usr/bin/env sh

    missing_crds="$(kumactl install crds --only-missing)"

    if [ -n "${missing_crds}" ]; then
      echo "found missing crds - saving to /kuma/missing/crds.yaml"
      echo "${missing_crds}" > /kuma/missing/crds.yaml
    fi
---
# Source: kuma/templates/pre-delete-webhooks.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kuma-pre-delete-job
  annotations:
    "helm.sh/hook": "pre-delete"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
  labels:
    helm.sh/chart: kuma-0.7.0
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: kuma
    app.kubernetes.io/version: "1.3.0"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - admissionregistration.k8s.io
    resources:
      - validatingwebhookconfigurations
    resourceNames:
      - kuma-validating-webhook-configuration
    verbs:
      - delete
---
# Source: kuma/templates/pre-install-patch-namespace-job.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kuma-patch-ns-job
  namespace: kuma-system
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
  labels:
    helm.sh/chart: kuma-0.7.0
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: kuma
    app.kubernetes.io/version: "1.3.0"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
    resourceNames:
      - kuma-system
    verbs:
      - get
      - patch
---
# Source: kuma/templates/pre-upgrade-install-missing-crds-job.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kuma-install-missing-crds
  annotations:
    "helm.sh/hook": "pre-upgrade"
    "helm.sh/hook-weight": "-1"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
  labels:
    helm.sh/chart: kuma-0.7.0
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: kuma
    app.kubernetes.io/version: "1.3.0"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
    - "apiextensions.k8s.io"
    resources:
      - customresourcedefinitions
    verbs:
      - create
      - list
      - get
---
# Source: kuma/templates/pre-delete-webhooks.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kuma-pre-delete-job
  annotations:
    "helm.sh/hook": "pre-delete"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
  labels:
    helm.sh/chart: kuma-0.7.0
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: kuma
    app.kubernetes.io/version: "1.3.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kuma-pre-delete-job
subjects:
  - kind: ServiceAccount
    name: kuma-pre-delete-job
    namespace: kuma-system
---
# Source: kuma/templates/pre-install-patch-namespace-job.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kuma-patch-ns-job
  namespace: kuma-system
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
  labels:
    helm.sh/chart: kuma-0.7.0
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: kuma
    app.kubernetes.io/version: "1.3.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kuma-patch-ns-job
subjects:
  - kind: ServiceAccount
    name: kuma-patch-ns-job
    namespace: kuma-system
---
# Source: kuma/templates/pre-upgrade-install-missing-crds-job.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kuma-install-missing-crds
  annotations:
    "helm.sh/hook": "pre-upgrade"
    "helm.sh/hook-weight": "-1"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
  labels:
    helm.sh/chart: kuma-0.7.0
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: kuma
    app.kubernetes.io/version: "1.3.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kuma-install-missing-crds
subjects:
  - kind: ServiceAccount
    name: kuma-install-missing-crds
    namespace: kuma-system
---
# Source: kuma/templates/pre-delete-webhooks.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: kuma-delete-webhook
  namespace: kuma-system
  labels:
  
    helm.sh/chart: kuma-0.7.0
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: kuma
    app.kubernetes.io/version: "1.3.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": "pre-delete"
    
    "helm.sh/hook-weight": "5"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
spec:
  template:
    metadata:
      name: kuma-delete-webhook
      labels:
    
        helm.sh/chart: kuma-0.7.0
        app.kubernetes.io/name: kuma
        app.kubernetes.io/instance: kuma
        app.kubernetes.io/version: "1.3.0"
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: kuma-pre-delete-job
      nodeSelector:
      
        kubernetes.io/arch: amd64
        kubernetes.io/os: linux
      restartPolicy: OnFailure
      containers:
        - name: pre-delete-job
          image: "bitnami/kubectl:1.20"
          command:
            - 'kubectl'
            - 'delete'
            - 'ValidatingWebhookConfiguration'
            - kuma-validating-webhook-configuration
---
# Source: kuma/templates/pre-install-patch-namespace-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: kuma-patch-ns
  namespace: kuma-system
  labels:
  
    helm.sh/chart: kuma-0.7.0
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: kuma
    app.kubernetes.io/version: "1.3.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": "pre-install"
    
    "helm.sh/hook-weight": "5"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
spec:
  template:
    metadata:
      name: kuma-patch-ns-script
      labels:
    
        helm.sh/chart: kuma-0.7.0
        app.kubernetes.io/name: kuma
        app.kubernetes.io/instance: kuma
        app.kubernetes.io/version: "1.3.0"
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: kuma-patch-ns-job
      nodeSelector:
      
        kubernetes.io/arch: amd64
        kubernetes.io/os: linux
      restartPolicy: OnFailure
      containers:
        - name: pre-install-job
          image: "bitnami/kubectl:1.20"
          command:
            - 'kubectl'
            - 'patch'
            - 'namespace'
            - "kuma-system"
            - '--type'
            - 'merge'
            - '--patch'
            - '{ "metadata": { "labels": { "kuma.io/system-namespace": "true" } } }'
---
# Source: kuma/templates/pre-upgrade-install-missing-crds-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: kuma-install-missing-crds
  namespace: kuma-system
  labels:
  
    helm.sh/chart: kuma-0.7.0
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: kuma
    app.kubernetes.io/version: "1.3.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": "pre-upgrade"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
spec:
  template:
    metadata:
      name: kuma-install-missing-crds-job
      labels:
    
        helm.sh/chart: kuma-0.7.0
        app.kubernetes.io/name: kuma
        app.kubernetes.io/instance: kuma
        app.kubernetes.io/version: "1.3.0"
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: kuma-install-missing-crds
      nodeSelector:
      
        kubernetes.io/arch: amd64
        kubernetes.io/os: linux
      restartPolicy: OnFailure
      containers:
        - name: pre-upgrade-job
          image: "bitnami/kubectl:1.20"
          command:
            - '/kuma/scripts/install_missing_crds.sh'
          volumeMounts:
            - mountPath: /kuma/missing
              name: missing-crds
              readOnly: true
            - mountPath: /kuma/scripts
              name: scripts
              readOnly: true
      initContainers:
        - name: pre-upgrade-job-init
          image: "docker.io/kumahq/kumactl:1.3.0"
          volumeMounts:
          - mountPath: /kuma/missing
            name: missing-crds
          - mountPath: /kuma/scripts
            name: scripts
            readOnly: true
          command:
          - '/kuma/scripts/save_missing_crds.sh'
      volumes:
        - name: scripts
          configMap:
            name: kuma-install-missing-crds-scripts
            defaultMode: 0755
        - name: missing-crds
          emptyDir: {}
